<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Александр Булимов - записки сисадмина.</title><link>http://bulimov.ru/</link><description></description><atom:link href="http://bulimov.ru/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 29 Jul 2015 00:00:00 +0300</lastBuildDate><item><title>Впечатления от CoreOS</title><link>http://bulimov.ru/it/coreos-opinion/</link><description>&lt;p&gt;На волне популярности контейнерной виртуализации &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt;
стали появляться специализированные дистрибутивы Linux, созданные специально
для использования в роли базового хоста для Docker-контейнеров.&lt;/p&gt;
&lt;p&gt;Пионером среди них стал проект &lt;a href="http://coreos.com"&gt;CoreOS&lt;/a&gt;, затем появились
&lt;a href="http://www.projectatomic.io/"&gt;Project Atomic&lt;/a&gt; от RedHat и
&lt;a href="https://developer.ubuntu.com/en/snappy/"&gt;Ubuntu Snappy&lt;/a&gt; от Canonical.&lt;/p&gt;
&lt;p&gt;Чем они все отличаются от привычных дистрибутивов? Основным отличием является
модель обновления дистрибутива. Все эти проекты предлагают атомарные обновления,
подразумевающие сборку нового образа системы с последующей перезагрузкой в него.
При этом образ монтируется в read-only режиме, и есть возможность откатиться на
предыдущий образ системы. Также приятной особенностью могут быть дополнительные
инструменты для управления контейнерами или кластеризации.&lt;/p&gt;
&lt;p&gt;Поскольку мы уже активно используем Docker на базе Ubuntu 14.04 LTS, было
логичным попробовать специализированный дистрибутив для работы с контейнерами,
и выбрал я для этого эксперимента CoreOS. Выбор этот был обусловен отчасти
тем, что в рамках проекта CoreOS было разработано несколько весьма интересных
программ - это &lt;strong&gt;&lt;a href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt;&lt;/strong&gt; и
&lt;strong&gt;&lt;a href="https://github.com/coreos/fleet"&gt;fleet&lt;/a&gt;&lt;/strong&gt;. Первый из них является
распределенным key-value хранилищем, аналогом Consul, а второй представляет
собой инструмент для оркестрации кластера Docker-хостов путем распределения
через etcd &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;юнит-файлов systemd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В общем, на сайте и в документации все это выглядело весьма интересно, и я с
энтузиазмом ринулся осваивать новые технологии. Реальность же ожидаемо оказалась
весьма печальной - все описанное на сайте (кроме атомарных обновлений) работало
через раз, а иногда и вообще не работало.&lt;/p&gt;
&lt;p&gt;Чего стоит только fleet, который всего-то должен раскладывать по хостам
юнит-файлы systemd, и следить за их статусом. Мало того, что он запускает эти
сервисы в блокируещем режиме, так что получить статус кластера в момент запуска
service-файла, который делает docker pull, невозможно, так банальный запуск
трех инстансов одного сервиса на кластере из трех машин закончился тем, что
один из этих трех сервисов остался в inactive состоянии, и вывести его из этой
комы мне не удалось ни многократным пересозданием и уничтожением этого сервиса,
ни ручной очисткой данных etcd.&lt;/p&gt;
&lt;p&gt;При этом на аналогичном втором тестовом кластере запуск того же
сервиса на трех нодах прошел успешно, но etcd на всех серверах регулярно сыпал
невнятными ошибками и перезапускался, в результате чего fleet регулярно терял ноды.&lt;/p&gt;
&lt;p&gt;И что самое забавное, такое же поведение я наблюдал в начале года на официальном
тестовом проекте &lt;a href="https://github.com/coreos/coreos-vagrant"&gt;CoreOS-Vagrant&lt;/a&gt;,
но не придал этому значения, списав все на маломощные виртуалки и тестовый
характер окружения. Прошло пол-года, а CoreOS 717.3.0 страдает все от тех
же детских проблем.&lt;/p&gt;
&lt;p&gt;Зато атомарные обновления работают вполне исправно, и на том спасибо.
То есть для замены Ubuntu в качестве базового хоста CoreOS подходит.
&lt;em&gt;Тут стоит сделать одну важную оговорку - при условии, что этот хост крутится
в какой-либо системе виртуализации, в облаке или в KVM/VMware/Xen. Все
дистрибутивы для контейнеров ориентированны именно на такой режим работы.&lt;/em&gt;
Подобная замена даст автоматические атомарные обновления и свежее ядро, и
сократит время на перезагрузки благодаря минималистичной системе.&lt;/p&gt;
&lt;p&gt;Но раз главные фичи CoreOS оказались не готовы к нормальной эксплуатации, можно
поэкспериментировать с другими аналогичными системами. А общее впечатление от
CoreOS осталось у меня определенно негативным - нельзя про &lt;em&gt;такой&lt;/em&gt; уровень
работоспособности писать &lt;em&gt;такие&lt;/em&gt; вещи:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Stable channel should be used by production clusters.
Versions of CoreOS are battle-tested within the Beta and Alpha channels before being promoted.
-- https://coreos.com/releases/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;По моим впечатлениям, до &lt;em&gt;production clusters&lt;/em&gt; этому проекту еще расти и расти,
хотя концепция и маркетинг отличные.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 29 Jul 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-07-29:it/coreos-opinion/</guid><category>CoreOS</category><category>Мнение</category></item><item><title>Прощай, личный VPS</title><link>http://bulimov.ru/it/goodby-vps/</link><description>&lt;p&gt;Больше года назад я &lt;a href="/it/Личный-vps"&gt;стал использовать свой виртуальный частный сервер(VPS)&lt;/a&gt;,
но недавно с полной ясностью осознал, что несмотря на то, что я регулярно пользуюсь
многими сервисами на своем сервере, сам VPS приносит мне только негативные эмоции.&lt;/p&gt;
&lt;p&gt;Необходимость следить за этим сервером, обновлять на нем софт, решать мелкие
проблемы после обновлений - все это стало меня бесить. Возможно, это возраст
(ха-ха), но возни с серверами мне хватает на работе, причем задачи там большие
и интересные, а с VPS всякая рутинная мелочь.&lt;/p&gt;
&lt;p&gt;При этом основную задачу - изоляцию персональных данных - VPS все равно не решет.
Попробуйте ради эксперимента пожить в современном цифровом обществе недельку без
сервисов Google/Yandex/etc, и поймете, что это невозможно при условии контакта с
другими людьми. А раз пользуешься их сервисами - значит данные о тебе у них уже
есть.&lt;/p&gt;
&lt;p&gt;Вот и получилось, что все регулярно используемые мной сервисы на VPS, такие
как RSS-читалка, заметки, read-it-later - есть в десятках вариантов,
беслатно, удобно, зачастую гораздо лучшего качества, и без необходимости следить
за своим сервером. Для исходников я давно уже использую только GitHub, а
бесплатная почта для доменов тоже есть нескольких сортов, так что ни от
одного из удобств личного сервера отказываться не пришлось.&lt;/p&gt;
&lt;p&gt;При этом я очень рад, что в свое время решился на такой эксперимент - благодаря
опыту с VPS я начал использовать RSS-читалки и read-it-later, что сохранило
мне кучу времени и сил.&lt;/p&gt;
&lt;p&gt;А кроме того, теперь я очень хорошо понимаю, за какие удобства я плачу своими
персональными данными, и какие усилия требуются, чтобы этого не делать.&lt;/p&gt;
&lt;p&gt;На данный момент я пришел к тому, что мне проще и удобнее использовать внешние
"бесплатные" сервисы (платя за них персональными данными для целенаправленной
рекламы и т.п.), чем платить за свой VPS и тратить на него свое время и силы.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-07-09:it/goodby-vps/</guid><category>VPS</category><category>Жизнь</category></item><item><title>Попробуйте Packetbeat</title><link>http://bulimov.ru/it/try-packetbeat/</link><description>&lt;p&gt;Вчера в &lt;a href="https://www.elastic.co/blog"&gt;блоге Elasticsearch&lt;/a&gt; появилась отличная
новость - проект &lt;a href="https://www.elastic.co/products/beats/packetbeat"&gt;Packetbeat&lt;/a&gt;,
развиваемый до этого энтузиастами, присоединился к &lt;a href="https://www.elastic.co"&gt;Elastic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Я уже довольно давно слежу за этим проектом, и теперь, когда можно не
беспокоиться о его будущем, хочу о нем рассказать.&lt;/p&gt;
&lt;p&gt;Packetbeat это такой инструмент мониторинга, который работает как анализатор
сетевых пакетов, парсит различные протоколы (сейчас поддерживаются HTTP, MySQL,
Postgresql, Redis, Thrift-RPC), получает нужные данные, и отсылает их либо напрямую
в Elasticsearch, либо в Redis, из которого данные будет забирать Logstash и
класть их все в тот же Elasticsearch.&lt;/p&gt;
&lt;p&gt;Поскольку парсится весь сетевой трафик, мы получаем полную картину взаимодействия
хостов и сервисов в нашей сети, а благодаря Elasticsearch и Kibana эту
информацию можно удобно обрабатывать и визуализировать.&lt;/p&gt;
&lt;p&gt;Чем же это так круто? Да тем, что поставив Elasticsearch, Kibana и Packetbeat,
практически без какой-либо конфигурации, мы сразу видим ключевые метрики сервисов,
и получаем ответы на основные вопросы, например:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;сколько у нас вообще запросов к базе в минуту?&lt;/li&gt;
&lt;li&gt;а какие из этих запросов к базе данных самые медленные?&lt;/li&gt;
&lt;li&gt;каково соотношение select и insert/update запросов?&lt;/li&gt;
&lt;li&gt;каковы процентили времени ответов базы данных?&lt;/li&gt;
&lt;li&gt;какие у нас самые частые HTTP-запросы?&lt;/li&gt;
&lt;li&gt;сколько у нас ошибок в ответах на HTTP-запросы?&lt;/li&gt;
&lt;li&gt;как вообще у нас ходит трафик в системе web-база-кеш?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Посмотреть все это великолепие живьем можно на
&lt;a href="http://demo.elastic.co/packetbeat"&gt;демо-странице Packetbeat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Конечно, у этого подхода есть и минусы, главный из которых - производительность.
Packetbeat парсит сетевой трафик, и это недешевое удовольствие. Идеальным
вариантом работы для него является анализ трафика с помощью mirror ports на
сетевых устройствах, таким образом можно собирать информацию на отдельном сервере,
и Packetbeat не будет создавать нагрузки на сервер с наблюдаемым сервисом.&lt;/p&gt;
&lt;p&gt;Если же это невозможно, Packetbeat умеет снифать трафик с сетевого
интерфейса хоста, причем разными способами - подробности
&lt;a href="https://www.elastic.co/guide/en/beats/packetbeat/current/capturing-options.html"&gt;в документации&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Я его именно в таком режиме использую, и весьма доволен - на средненьком сервере
с ~15k запросами к Postgres в минуту Packetbeat не создает значимой нагрузки на
производительность, и отлично все парсит.&lt;/p&gt;
&lt;p&gt;В комплекте идут удобные дашборды для Kibana 4, так что процесс построения
мониторинга сделан максимально безболезненным.&lt;/p&gt;
&lt;p&gt;В общем, попробуйте - это очень простой в развертывании и очень удобный и
наглядный инструмент мониторинга.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-05-28:it/try-packetbeat/</guid><category>Packetbeat</category><category>Elasticsearch</category><category>Kibana</category><category>Monitoring</category></item><item><title>Сменил Vim на Atom</title><link>http://bulimov.ru/it/vim-atom/</link><description>&lt;p&gt;Вот уже почти два месяца, как я по совету коллеги сменил Vim, которым
пользовался уже 5 лет, и который оброс у меня кучей плагинов,
на &lt;a href="http://atom.io"&gt;Github Atom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Использую я его как раньше Vim - для всего. В основном это написание
плейбуков &lt;a href="http://www.ansible.com/"&gt;Ansible&lt;/a&gt;, что включает в себя правку конфигов,
и написание кода на &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; и &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Сразу скажу, что не будь для Atom вменяемого vim-режима, я бы вряд ли
решился на переход. В свое время, когда я знакомился с миром
Emacs, я в итоге все равно пришел к использованию Evil Mode.&lt;/p&gt;
&lt;p&gt;На мое счастье, &lt;a href="https://atom.io/packages/vim-mode"&gt;vim-mode&lt;/a&gt; в Atom есть,
и очень хороший, а если дополнить его &lt;a href="https://atom.io/packages/ex-mode"&gt;ex-vim&lt;/a&gt;
и &lt;a href="https://atom.io/packages/vim-surround"&gt;vim-surround&lt;/a&gt;, то вообще отличный.&lt;/p&gt;
&lt;p&gt;Итак, раз с частью для непосредственного редактирования текста разобрались,
переходим к всяким крутым и нужным штукам, которые в Vim добавляются только
плагинами, таким как интеграция с Git, поддержка проверки синтаксиса,
автодополнение, автоформатирование и т.д.&lt;/p&gt;
&lt;p&gt;В Atom вообще все добавляется плагинами, такой вот у них подход, и в плане
плагинов у Atom все отлично, как минимум для Python и Golang. Автодополнение в
лице &lt;a href="https://atom.io/packages/autocomplete-plus"&gt;autocomplete-plus&lt;/a&gt; вообще
недавно было включено в состав базовых плагинов, для инеграции с git
есть &lt;a href="https://atom.io/packages/git-plus"&gt;Git-Plus&lt;/a&gt;, повторяющий функционал
vim-fugitive. Для Python есть поддержка всех имеющихся linter-ов, ну а для Go
поддержка просто образцовая благодаря &lt;a href="https://atom.io/packages/go-plus"&gt;go-plus&lt;/a&gt;,
который интегрирует в Atom почти все утилиты Go, включая наглядное отображение
покрытия кода тестами, lint, vet, и автоформатирование с gofmt, превращая
Atom в полноценную IDE для Go.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Но зачем же менять vim, где все это можно добавить плагинами, на Atom, где все
это опять-таки можно добавить плагинами?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В Atom все плагины работают асинхронно, и это добавляет удобства в
работе. Часть плагинов, например предпросмотр Markdown в соседней панели
редактора, в vim невозможны в принципе.&lt;/p&gt;
&lt;p&gt;Поскольку Atom использует
для рендеринга движок Chromium, в нем легко сделать гораздо более продвинутый и
плавный UI, а благодаря упору на плагины и расширяемость Atom &lt;em&gt;очень&lt;/em&gt; активно
развивается, и новые возможности появляются чуть ли не каждый день.&lt;/p&gt;
&lt;p&gt;В Atom очень удобно реализована работа с проектами, с поддержкой поиска по
файлам, быстрым открытием файлов (как в плагине Ctrl-P для Vim), заменой во всех
файлах, статусом Git.&lt;/p&gt;
&lt;p&gt;А еще мне хочется больше красоты и удобства в повседневно используемых утилитах,
и в этом плане Atom серьезно превосходит и графическую, и консольную версию Vim.&lt;/p&gt;
&lt;p&gt;При этом, в отличие от проприетарного Sublime Text, имеющего схожие возможности,
Atom открыт под &lt;a href="https://raw.githubusercontent.com/atom/atom/master/LICENSE.md"&gt;лицензией MIT&lt;/a&gt;,
и имеет крайне активное сообщество.&lt;/p&gt;
&lt;p&gt;В общем, обратно на Vim возвращаться я не собираюсь, и крайне рекомендую хардкорным
вимерам попробовать Atom с vim-mode. Отмечу при этом, что на серверах по ssh я все
также регулярно использую Vim для мелких быстрых правок.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 21 May 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-05-21:it/vim-atom/</guid><category>Vim</category><category>Atom</category><category>Жизнь</category></item><item><title>Улучшаем сообщения от мониторинга с помощью cAdvisor-companion</title><link>http://bulimov.ru/it/cadvisor-companion/</link><description>&lt;p&gt;Слышали ли вы когда-нибудь о такой практике, как "Monitoring Events Enrichment"?
Если вкратце, то это практика наполнения дополнительной информацией сообщений
от мониторинга, так что на выяснение причины проблемы уходит меньше времени
и телодвижений.&lt;/p&gt;
&lt;p&gt;Есть даже контора, которая помогает внедрять эту практику на коммерческой основе,
у них на &lt;a href="http://www.eventenrichment.com/"&gt;сайте&lt;/a&gt; есть неплохие примеры того,
что и зачем можно добавить к обычному сообщению от Nagios.&lt;/p&gt;
&lt;p&gt;Сама эта идея мне очень нравится, и вот после очередного неинформативного
сообщения от &lt;a href="http://bulimov.ru/it/check-cadvisor/"&gt;мониторинга&lt;/a&gt;,
которое пришло тогда, когда я был далеко от компьютера, и гласило
&lt;code&gt;CheckDockerStats CRITICAL: 91% CPU Used!&lt;/code&gt;, я решил добавить
таким сообщениям полезного контекста.&lt;/p&gt;
&lt;p&gt;Конечно, очевидным кандидатом на добавление к сообщению от мониторинга
в данном случае является список процессов в контейнере, отсортированных
по использованию CPU. Если это не кажется очевидным, то представьте, что
вам приходит сообщение от мониторинга, что в каком-то контейнере превышен
порог использования CPU/памяти, а вы не у компьютера, и к тому моменту, как
вы можете проверить, что же там случилось, контейнер уже вернулся к своему
нормальному потреблению ресурсов.&lt;/p&gt;
&lt;p&gt;Для обычных проверок &lt;code&gt;check_load&lt;/code&gt; и &lt;code&gt;check_memory&lt;/code&gt; из пакета nagios-plugins
я добавил топ-5 потребителей ресурсов достаточно легко - обернул стандратные
плагины в простенький wrapper на bash, получилось примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# check_memory wrapper&lt;/span&gt;
&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/lib/nagios/plugins/check_memory &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\|&lt;/span&gt; -f 1&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;perfdata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\|&lt;/span&gt; -f 2&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; -ne &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;  &lt;/span&gt;ps aux --sort -pmem &lt;span class="p"&gt;|&lt;/span&gt; head -n 5
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; | &lt;/span&gt;&lt;span class="nv"&gt;$perfdata&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;При превышении заданных лимитов вывод этого wrapperа получается такой:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@host:~# /usr/lib/nagios/plugins/check_memory_wrapper.sh -f -C -w &lt;span class="m"&gt;15&lt;/span&gt; -c 10
CRITICAL - 4.9% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1198364&lt;/span&gt; kB&lt;span class="o"&gt;)&lt;/span&gt; free!
USER       PID %CPU %MEM    VSZ   RSS      TTY  STAT START   TIME COMMAND
traffic+ &lt;span class="m"&gt;28086&lt;/span&gt; 11.3 91.7 &lt;span class="m"&gt;25970900&lt;/span&gt; &lt;span class="m"&gt;22651436&lt;/span&gt; ?    Sl   Mar18 5553:57 /usr/bin/traffic_server -M --httpport 8080:fd&lt;span class="o"&gt;=&lt;/span&gt;9
haproxy  &lt;span class="m"&gt;26404&lt;/span&gt;  7.0  0.2 &lt;span class="m"&gt;85832&lt;/span&gt;    &lt;span class="m"&gt;59364&lt;/span&gt;    ?    Ss   Mar19 3332:04 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -D -sf 25137
syslog   &lt;span class="m"&gt;25077&lt;/span&gt;  0.5  0.1 &lt;span class="m"&gt;332568&lt;/span&gt;   &lt;span class="m"&gt;29764&lt;/span&gt;    ?    Ssl  Apr06  109:24 rsyslogd
root     &lt;span class="m"&gt;15342&lt;/span&gt;  0.1  0.0 &lt;span class="m"&gt;84124&lt;/span&gt;    &lt;span class="m"&gt;15212&lt;/span&gt;    ?    S    Mar08   95:21 /usr/bin/perl -w /usr/sbin/ldirectord /etc/ldirectord.cf start
 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;24678520KB&lt;span class="p"&gt;;;;;&lt;/span&gt; &lt;span class="nv"&gt;USED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;23480156KB&lt;span class="p"&gt;;&lt;/span&gt;20976742&lt;span class="p"&gt;;&lt;/span&gt;22210668&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nv"&gt;FREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1198364KB&lt;span class="p"&gt;;;;;&lt;/span&gt; &lt;span class="nv"&gt;CACHES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;980600KB&lt;span class="p"&gt;;;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и сразу из сообщения о проблеме видно, кто сожрал всю память на сервере.&lt;/p&gt;
&lt;p&gt;Для контейнера получить такую информацию сложнее, поскольку:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;в контейнере может не быть ни NRPE-сервера, ни sshd;&lt;/li&gt;
&lt;li&gt;утилиты top, ps и прочие, получающие данные из общесистемных счетчиков
в &lt;code&gt;/proc&lt;/code&gt;, показывают в контейнерах &lt;a href="http://fabiokung.com/2014/03/13/memory-inside-linux-containers/"&gt;неверные данные&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;cAdvisor не предоставляет информации о процессах внутри контейнера.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Поскольку информацию об использовании памяти/CPU я беру по HTTP из
&lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt;,
я решил следовать этому же сценарию и для обогащения сообщений о проблемах,
и написать свой мини-сервис для получения информации о том, какие процессы
запущены в контейнере.&lt;/p&gt;
&lt;p&gt;Поскольку сервис получался комплиментарным к cAdvisor, я назвал его
&lt;a href="https://github.com/abulimov/cadvisor-companion"&gt;cAdvisor-companion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В общем, алгоритм решения задачи оказался не сложным - достаточно всего лишь
пройтись по файловой системе &lt;code&gt;/proc&lt;/code&gt; на родительском хосте, собрать данные
по всем процессам, и фильтровать их по cgroup.&lt;/p&gt;
&lt;p&gt;Поскольку мой сервис должен был собирать в отдельном потоке данные,
и при этом отвечать на HTTP-запросы к API, да еще делать все это быстро, я выбрал
для реализации не привычный Python, а "стильный, модный, молодежный"
&lt;a href="http://golang.org/"&gt;Golang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Сразу скажу, что это решение оказалось удачным, и позволило мне достаточно
быстро и просто написать этот небольшой сервис, уложившись меньше чем в 500
строк кода вместе с тестами.&lt;/p&gt;
&lt;p&gt;Итогом нескольких дней разработки в свободное от работы время стал сервис,
пригодный к разворачиванию в контейнере, которому для работы требуется только
read-only доступ к &lt;code&gt;/proc&lt;/code&gt;, и который по HTTP API отдает в виде JSON историю
запущенных процессов для указанного контейнера.&lt;/p&gt;
&lt;p&gt;Подробнее о том, как этот сервис запускать, что из себя представляет API, почему
я не стал использовать Docker API, и прочие полезные вещи можно почитать на
&lt;a href="https://github.com/abulimov/cadvisor-companion"&gt;github-страничке cAdvisor-companion&lt;/a&gt;,
ну а я хочу рассказать как я использую этот самописный сервис, и какие у него
есть недостатки.&lt;/p&gt;
&lt;p&gt;Использую я его как и планировал - получаю список процессов в контейнере в
случае сообщений от мониторинга, и вывожу вместе с алертом. Теперь сообщение
из начала статьи, которое и побудило меня к написанию своего сервиса,
выглядит примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CheckDockerStats WARNING: 83.32% CPU used!
 USER   PID  %CPU  %MEM      VSZ      RSS   STAT COMMAND
&lt;span class="m"&gt;65534&lt;/span&gt;  &lt;span class="m"&gt;1285&lt;/span&gt;  18.3   0.0    &lt;span class="m"&gt;18396&lt;/span&gt;     &lt;span class="m"&gt;1632&lt;/span&gt;      S /usr/sbin/nutcracker -v &lt;span class="m"&gt;11&lt;/span&gt; -c /etc/twemproxy/config.yml
 &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="m"&gt;24891&lt;/span&gt;   7.5   1.4   &lt;span class="m"&gt;299524&lt;/span&gt;    &lt;span class="m"&gt;99200&lt;/span&gt;      S python /path/to/program.py
 &lt;span class="m"&gt;1000&lt;/span&gt;  &lt;span class="m"&gt;4474&lt;/span&gt;   7.4   1.4   &lt;span class="m"&gt;303356&lt;/span&gt;   &lt;span class="m"&gt;103416&lt;/span&gt;      S python /path/to/program.py
 &lt;span class="m"&gt;1000&lt;/span&gt;  &lt;span class="m"&gt;4468&lt;/span&gt;   7.4   1.4   &lt;span class="m"&gt;301416&lt;/span&gt;   &lt;span class="m"&gt;101228&lt;/span&gt;      S python /path/to/program.py
 &lt;span class="m"&gt;1000&lt;/span&gt;  &lt;span class="m"&gt;4475&lt;/span&gt;   7.4   2.5   &lt;span class="m"&gt;382636&lt;/span&gt;   &lt;span class="m"&gt;181792&lt;/span&gt;      S python /path/to/program.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Проверки использования ресурсов в контейнерах, пример вывода которых я
привел выше, я делаю все
&lt;a href="https://github.com/abulimov/utils/blob/master/nagios/check_cadvisor.py"&gt;тем же скриптом check_cadvisor.py&lt;/a&gt;,
только слегка доработанным для получения данных о процессах от cAdvisor-companion.&lt;/p&gt;
&lt;p&gt;Ну а теперь о недостатках:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;мы видим не PID процесса в контейнере, а PID процесса в родительской системе&lt;/li&gt;
&lt;li&gt;%CPU, который мы получаем от cAdvisor-companion, это &lt;em&gt;относительный процент
использования CPU в контейнере&lt;/em&gt;. Чтобы было понятнее - мы вычисляем то,
какой процент из &lt;em&gt;всего&lt;/em&gt; процессорного времени, использованного за некий
&lt;em&gt;interval&lt;/em&gt; контейнером, использовал конкретный процесс, в то время как ps и top
показывает то, какой процент &lt;em&gt;доступного&lt;/em&gt; процессорного времени использовал
процесс за тот же &lt;em&gt;interval&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Несмотря на перечисленные недостатки, сервис со своей задачей справляется,
так что если хотите обогатить сообщения от мониторинга полезным контекстом
- попробуйте &lt;a href="https://github.com/abulimov/cadvisor-companion"&gt;cAdvisor-companion&lt;/a&gt;
в паре с &lt;a href="https://github.com/abulimov/utils/blob/master/nagios/check_cadvisor.py"&gt;check_cadvisor.py&lt;/a&gt;,
это очень легко и абсолютно безопасно - при запуске в виде контейнера он получает
только read-only доступ к &lt;code&gt;/proc&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Tue, 21 Apr 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-04-21:it/cadvisor-companion/</guid><category>Golang</category><category>cAdvisor</category><category>cAdvisor-companion</category><category>Программирование</category><category>Monitoring</category></item><item><title>Балансировка в HAProxy на основе данных cAdvisor</title><link>http://bulimov.ru/it/haproxy-cadvisor/</link><description>&lt;p&gt;Для запуска Docker-контейнеров у меня в данный момент выделено достаточно много
серверов, причем аппаратная часть у некоторых из них отличается
друг от друга. Соответственно, при настройке на чудесном балансировщике
&lt;a href="http://www.haproxy.org/"&gt;HAProxy&lt;/a&gt; такого параметра балансировки
как &lt;em&gt;"вес сервера"&lt;/em&gt;, приходится это различие в аппаратной части учитывать.&lt;/p&gt;
&lt;p&gt;Можно, конечно, подобрать значения весов самостоятельно на основе
данных мониторинга, а при появлении нагрузки от соседних Docker-контейнеров
эти веса корректировать, но это не наш метод.&lt;/p&gt;
&lt;p&gt;Не так давно я &lt;a href="/it/check-cadvisor"&gt;писал&lt;/a&gt; о том, как использую данные из
&lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt; для мониторинга нагруженности
контейнеров.&lt;/p&gt;
&lt;p&gt;Поскольку у нас уже есть такой чудесный инструмент как cAdvisor, и мы умеем
получать от него показатели утилизации CPU для выбранных контейнеров, то почему
бы нам не выставлять вес серверов бекенда в зависимости от этого показателя?&lt;/p&gt;
&lt;p&gt;Именно так я и думал, когда сел писать простой скрипт на Python,
который бы запускался раз в минуту по cron, и с помощью
&lt;a href="http://cbonte.github.io/haproxy-dconv/configuration-1.4.html#9.2"&gt;socket-команд&lt;/a&gt;
менял бы вес сервера в балансировке в зависимости от значения нагрузки
на этот сервер, полученного от cAdvisor API.&lt;/p&gt;
&lt;p&gt;Результатом моей работы стал скрипт &lt;strong&gt;&lt;a href="https://github.com/abulimov/haproxy-cadvisor"&gt;haproxy_cadvisor.py&lt;/a&gt;&lt;/strong&gt;,
который делает ровно то, что я описал.&lt;/p&gt;
&lt;p&gt;При этом логика выставления весов очень проста:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;получаем процент использования CPU для всех бекенд-контейнеров и
считаем среднюю нагрузку;&lt;/li&gt;
&lt;li&gt;для каждого сервера получаем через socket HAProxy текущий вес и
сопоставляем с текущей нагрузкой;&lt;/li&gt;
&lt;li&gt;для каждого сервера определяем как надо изменить вес в балансировке,
чтобы получить нагрузку, равную посчитанной средней;&lt;/li&gt;
&lt;li&gt;для каждого сервера выставляем новый вес, изменив его значение на половину
разницы между текущим весом и требуемым весом, чтобы сгладить скачки нагрузки.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;В качестве файла с настройками используется простой json-файл, в котором
указывается путь к сокету HAProxy, список URL для опрашиваемых сервисов cAdvisor,
название бекенда в HAProxy, для которого будет осуществлятся динамическое
выставление весов серверов, и регулярное выражение для выбора серверов бекенда из
списка алиасов контейнеров, полученного от cAdvisor.&lt;/p&gt;
&lt;p&gt;Достоинства получившегося решения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Динамическое выставление весов серверов бекенда в зависимости
нагрузки на них;&lt;/li&gt;
&lt;li&gt;Простота кода и использования:&lt;ul&gt;
&lt;li&gt;конфиг в json&lt;/li&gt;
&lt;li&gt;работа в Python 2.7+ и Python 3.2+&lt;/li&gt;
&lt;li&gt;кроме стандартной библиотеки Python используется только Requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Устойчивость к отказу cAdvisor - мы меняем веса только для тех серверов, для
которых получены свежие данные по загруженности.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Поскольку скрипт создавался максимально простым, он (на момент написания этой
заметки) обладает и рядом недостатков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сервисы cAdvisor опрашиваются последовательно;&lt;/li&gt;
&lt;li&gt;Один скрипт может контролировать балансировку только одного бекенда в HAProxy;&lt;/li&gt;
&lt;li&gt;Скрипт не поддерживает работу в режиме сервиса и требует запуска по cron.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Также хочу отметить особенность работы этого решения при наличии нескольких
одновременно работающих серверов-балансировщиков. Заключается она в том,
что поскольку скрипты на этих серверах работают независимо, и никакой
информацией не обмениваются, то и веса выставляют независимо. Это может
привести к ситуации, когда на одном HAProxy для сервера будет выставлен
минимально возможный вес 1, а на втором вес существенно больший среднего.
На работу балансировки это конечно не влияет, поскольку итоговая нагрузка
получается требуемой, но этот момент следует иметь в виду.
Ну и в случае выхода одного из балансировщиков из строя, второму потребуется
пара минут на выравнивание нагрузки.&lt;/p&gt;
&lt;p&gt;Описанный скрипт работает у меня в бою уже достаточно продолжительное время,
и отлично себя зарекомендовал. И что интересно - уже после создания этого
решения, читая про &lt;a href="http://prometheus.io/"&gt;Prometheus&lt;/a&gt; я обнаружил
&lt;a href="http://www.boxever.com/balancing-based-on-utilisation-with-haproxy"&gt;статью от boxever.com&lt;/a&gt;,
в которой описан аналогичный подход, однако сам итоговый продукт они
почему-то не выложили.&lt;/p&gt;
&lt;p&gt;Я же очень люблю opensource, и поэтому описанный в этой заметке скрипт доступен
всем желающим под лицензией MIT в &lt;a href="https://github.com/abulimov/haproxy-cadvisor"&gt;репозитории на github&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 15 Apr 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-04-15:it/haproxy-cadvisor/</guid><category>HAProxy</category><category>cAdvisor</category><category>Python</category><category>Программирование</category></item><item><title>Открыл для себя cVim для Google Chrome</title><link>http://bulimov.ru/it/chromium-vim/</link><description>&lt;p&gt;Последние 4 года я использую Vim в качестве текстового редактора и IDE, и все это время
я использовал браузер Mozilla Firefox с дополнением &lt;a href="http://www.vimperator.org/vimperator"&gt;Vimperator&lt;/a&gt;,
либо с его форком - &lt;a href="http://5digits.org/pentadactyl/"&gt;Pentadactyl&lt;/a&gt;, для получения
аналогичной навигации в браузере. Без функционала этих дополнений я как без рук,
и потому никак не мог использовать Google Chrome/Chromium.&lt;/p&gt;
&lt;p&gt;Дополнения типа Vimum/Vrome/ViChrome, которые добавляют vi-like навигацию
в Chrome, после Vimperator казались, мягко говоря, недоделанными,
и не давали и половины того комфорта при использовании браузера, к которому я привык.&lt;/p&gt;
&lt;p&gt;При этом к самому Firefox у меня накопилось масса претензий, главная из которых -
жуткие тормоза при использовании многих админских инструментов, таких как
&lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt;,
&lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt;, &lt;a href="http://grafana.org"&gt;Grafana&lt;/a&gt;.
И когда в очередной раз Firefox умер при работе с банальным графиком в Kibana,
я переключился в Chrome, и решил проверить, не появился ли для него нормальный аналог Vimperator.&lt;/p&gt;
&lt;p&gt;Оказалось, что наконец-то появился новый крутой opensource плагин - &lt;a href="https://github.com/1995eaton/chromium-vim"&gt;chromium-vim (cVim)&lt;/a&gt;.
Он умеет очень многое из того, что умеет Vimperator, и полностью настраивается.&lt;/p&gt;
&lt;p&gt;Если вы используете Firefox только из-за Vimperator - посмотрите на шикарный
&lt;a href="https://github.com/1995eaton/chromium-vim"&gt;cVim&lt;/a&gt; для Chrome.
Он еще сырой, только-только вышел в начале 2015 года, но уже делает в разы больше,
чем его аналоги на Chrome, и более того - он смог полностью заменить мне Vimperator,
которым я пользовался все эти годы под Firefox, и теперь я могу выбирать браузер
по его главным характеристикам, а не по наличию одного необходимого мне дополнения.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 27 Feb 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-02-27:it/chromium-vim/</guid><category>Жизнь</category><category>Vim</category></item><item><title>Мониторим Docker-контейнеры с cAdvisor и Nagios/Icinga2</title><link>http://bulimov.ru/it/check-cadvisor/</link><description>&lt;p&gt;После того, как я &lt;a href="/it/check-docker-memory"&gt;научился мониторить память в Docker-контейнерах&lt;/a&gt;,
я решил мониторить еще и нагрузку на CPU.
Поскольку это дело не самое тривиальное, и хотелось не писать свой
велосипед, а пользоваться чем-то популярным и поддерживаемым, я решил
попробовать &lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;И вот что я могу сказать - отличный инструмент!
Ресурсов практически не потребляет (около 20 Мб оперативной памяти и
неизмеримо мало CPU), обладает простым API для доступа к собираемой им
информации, имеет красивый веб-интерфейс с realtime-графиками.
А еще умеет сам писать метрики в InfluxDB, и в будущем &lt;a href="https://github.com/google/cadvisor/issues/474"&gt;научится писать
в Graphite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Конечно, наличие API позволяет написать плагин для любого мониторинга,
чем я тут же и занялся.&lt;/p&gt;
&lt;p&gt;Единственная хитрость была в том, что cAdvisor отдает нам статистику потребления
квантов времени в наносекундах для CPU, и надо это переводить в проценты загрузки.&lt;/p&gt;
&lt;p&gt;Формула довольно проста, и найдена в одном из issues к самому cAdvisor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Usage % = (Used CPU Time (in nanoseconds) for the interval) /(interval (in nano secs) * num cores)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вооружившись этим знанием, я написал &lt;a href="https://github.com/abulimov/utils/blob/master/nagios/check_cadvisor.py"&gt;плагин check_cadvisor.py&lt;/a&gt;,
который умеет проверять использование CPU и оперативной памяти в контейнере через cAdvisor API.&lt;/p&gt;
&lt;p&gt;Пример использования check_cadvisor.py - проверим, что количество свободной памяти в контейнере
loving_lalande не меньше, чем 15%, и уж точно не меньше 10%:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nagios@hostname:~&lt;span class="nv"&gt;$ &lt;/span&gt;./check_cadvisor.py -u http://cadvisor_url -n loving_lalande -m -w &lt;span class="m"&gt;15&lt;/span&gt; -c 10
CheckDockerStats OK: 79.96% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5869163&lt;/span&gt; kB&lt;span class="o"&gt;)&lt;/span&gt; free! &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;mem_used&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1470868KB&lt;span class="p"&gt;;&lt;/span&gt;1101004&lt;span class="p"&gt;;&lt;/span&gt;734003&lt;span class="p"&gt;;&lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;7340032
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А теперь проверим, что CPU используется менее чем на 10%, и уж точно менее, чем на 20%:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nagios@hostname:~&lt;span class="nv"&gt;$ &lt;/span&gt;./check_cadvisor.py -u http://cadvisor_url -n loving_lalande -C -w &lt;span class="m"&gt;10&lt;/span&gt; -c 20
CheckDockerStats WARNING: 12.98% CPU used! &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;cpu_usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.98%&lt;span class="p"&gt;;&lt;/span&gt;10&lt;span class="p"&gt;;&lt;/span&gt;20&lt;span class="p"&gt;;&lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt;100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Поскольку мой плагин отдает perfdata, а Icinga2 умеет слать ее в Graphite,
я могу не ждать добавление отправки в Graphite к cAdvisor, и уже сейчас получать графики
использования ресурсов в контейнерах.&lt;/p&gt;
&lt;p&gt;Можно еще прикрутить проверки использования места на подключенных дисках - cAdvisor эти данные тоже
собирает. Но мне пока такие проверки без надобности.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 20 Feb 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-02-20:it/check-cadvisor/</guid><category>Python</category><category>Nagios</category><category>Icinga2</category><category>cAdvisor</category><category>Monitoring</category></item><item><title>Научился мониторить использование памяти в Docker-контейнерах</title><link>http://bulimov.ru/it/check-docker-memory/</link><description>&lt;p&gt;Я сегодня занимался мониторингом, а конкретно нашими докер-контейнерами.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Лирическое отступление:
Для мониторинга я теперь (уже на другом месте работы) использую
наследника Nagios - &lt;a href="https://www.icinga.org/icinga/icinga-2/"&gt;Icinga2&lt;/a&gt;.
Пока все нравится, ребята очень круто переписали Nagios, реализовали гораздо
более вменяемый формат конфигурации, и кучу новых возможностей.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Используя Docker для автотестов я уже ловил проблемы, когда интерпретатор Ruby
кушал всю выделенную память в контейнере и тихо умирал от рук OOM Killer.&lt;/p&gt;
&lt;p&gt;Поскольку теперь я использую &lt;a href="http://docker.io"&gt;Docker&lt;/a&gt; уже не только для тестов,
но и "в бою", меня сильно беспокоило то, что мы не можем мониторить
использование памяти внутри контейнера.
А не можем мы этого делать потому, что все утилиты (free, top) и плагины мониторинга
используют данные из /proc/meminfo, которые внутри контейнеров
&lt;a href="http://fabiokung.com/2014/03/13/memory-inside-linux-containers/"&gt;не актуальны&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;К сожалению, на сегодняшний день проблема мониторинга памяти изнутри контейнера
так пока никем и не решена, хотя пожеланий у людей много, и &lt;a href="https://github.com/docker/docker/issues/8427"&gt;работа ведется&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ну а раз проблему нельзя решить изнутри, надо пробовать решать ее снаружи - так я подумал,
и решил посмотреть, как получить данные по использованию памяти для Docker-контейнера на хосте, который его запустил.&lt;/p&gt;
&lt;p&gt;Тут все весьма неплохо - для старых версий Docker можно было смотреть статистику
в &lt;code&gt;/sys/fs/cgroup/memory/lxc/$CID/memory.stat&lt;/code&gt;, где $CID это наш Container ID.
В новых версиях, использующие native драйвер, ту же информацию можно получить из
&lt;code&gt;/sys/fs/cgroup/memory/docker/$CID/memory.stat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Осталось только эти данные красиво прикрутить к мониторингу.&lt;/p&gt;
&lt;p&gt;Поскольку я уже настроил в Icinga2 зависимости для виртуалок от родительских хостов,
как описано &lt;a href="http://docs.icinga.org/icinga2/latest/doc/module/icinga2/chapter/monitoring-basics#dependencies"&gt;в официальной документации&lt;/a&gt;,
у каждой виртуалки в &lt;code&gt;host.vars.vm_parent&lt;/code&gt; прописан родитель, то есть
описание шаблона для хоста выглядит примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;generic-docker-host-on-vm01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;generic-docker-host&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm_parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vm01&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Это дает нам возможность для проверки памяти значение &lt;code&gt;nrpe_address&lt;/code&gt; брать
из &lt;code&gt;host.vars.vm_parent&lt;/code&gt;, то есть описание сервиса выглядит так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;memory-docker&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;generic-service-nrpe&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;display_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Memory Usage in Docker&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nrpe_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm_parent&lt;/span&gt;
  &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nrpe_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;check_docker_memory&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nrpe_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm_parent&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Таким образом, проверка относится к виртуалке, но выполняется
на родительском хосте. А раз относится к виртуалке - то зависит от ее живости, и когда виртуалка в DOWN, лишних алертов не будет. Да и вообще - все логично, проверка памяти хоста относится к самому хосту.&lt;/p&gt;
&lt;p&gt;Такое вот довольно элегантное решение получилось.&lt;/p&gt;
&lt;p&gt;Ну и, в завершение статьи, сам скрипт проверки - &lt;strong&gt;check_docker_memory.py&lt;/strong&gt;, написан для Python 2.7+, без внешних зависимостей,
&lt;a href="https://github.com/abulimov/utils/blob/master/nagios/check_docker_memory.py"&gt;взять можно тут&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Пример использования check_docker_memory.py - проверим, что количество свободной памяти в контейнере
loving_lalande не меньше, чем 15%, и уж точно не меньше 10%:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nagios@hostname:~&lt;span class="nv"&gt;$ &lt;/span&gt;./check_docker_memory.py -n loving_lalande -w &lt;span class="m"&gt;15&lt;/span&gt; -c &lt;span class="m"&gt;10&lt;/span&gt; -f
CheckDockerMemory OK: 89.005% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6533008&lt;/span&gt; kB&lt;span class="o"&gt;)&lt;/span&gt; free! &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;7340032KB&lt;span class="p"&gt;;;;;&lt;/span&gt; &lt;span class="nv"&gt;USED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;807024KB&lt;span class="p"&gt;;;;;&lt;/span&gt; &lt;span class="nv"&gt;FREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6533008KB&lt;span class="p"&gt;;;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;UPDATE 20.02.2015 - я теперь использую плагин, получающий эти же данные из cAdvisor, &lt;a href="/it/check-cadvisor"&gt;подробности тут&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 13 Feb 2015 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2015-02-13:it/check-docker-memory/</guid><category>Python</category><category>Nagios</category><category>Icinga2</category><category>Monitoring</category></item><item><title>Lyrics Tagger</title><link>http://bulimov.ru/it/lyricstagger/</link><description>&lt;h2&gt;Предыстория&lt;/h2&gt;
&lt;p&gt;Я езжу на работу в общественном транспорте, и слушаю там музыку
со смартфона. Достаточно часто хотелось почитать тексты прослушиваемых
в данный момент песен, но искать их в интернете было не слишком удобно,
да и вообще интернета до недавнего времени в метро не было.&lt;/p&gt;
&lt;p&gt;Решение выглядит очевидным - надо встроить тексты песен в сами музыкальные файлы.
Благо, основные форматы это позволяют.
Музыку я храню во &lt;a href="https://ru.wikipedia.org/wiki/FLAC"&gt;FLAC&lt;/a&gt;, а на смартфон
закидываю в &lt;a href="https://ru.wikipedia.org/wiki/Vorbis"&gt;Ogg Vorbis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Раз есть такая задача - значит можно ее решить с использованием программирования.
Быстрый поиск чего-то подходящего для моих целей ничего не дал, хотя многие плееры
умеют качать тексты песен по запросу.&lt;/p&gt;
&lt;p&gt;Поскольку задача не показалась мне сложной, и простая консольная утилита полностью
покрыла бы мои потребности, я решил такую утилиту написать сам.&lt;/p&gt;
&lt;p&gt;Выбрал я для реализации, конечно, Python. Все нужные библиотеки там уже были,
а именно:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mutagen"&gt;mutagen&lt;/a&gt; для работы с музыкальными файлами;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/requests"&gt;requests&lt;/a&gt; для получения нужных html-страниц;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/beautifulsoup4"&gt;beautifulsoup4&lt;/a&gt; для разбора html;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/docopt"&gt;docopt&lt;/a&gt; для удобного написания консольных утилит;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mock"&gt;mock&lt;/a&gt; для тестов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В итоге получилась вполне компактная программа, покрытая тестами, умеющая качать
тексты песен с &lt;a href="http://lyrics.wikia.com/"&gt;lyrics.wikia.com&lt;/a&gt; и записывать в теги
файлов в формате FLAC, Ogg, и MP3 (экспериментально, я MP3 практически на использую).
Модули для поддержки конкретных сайтов с текстами сделаны подключаемыми,
так что можно добавить скачивание с любого другого сайта, не меняя саму программу.&lt;/p&gt;
&lt;p&gt;Результатами моих трудов может воспользоваться любой желающий,
&lt;a href="https://github.com/abulimov/lyricstagger"&gt;код размещен на github&lt;/a&gt; под
лицензией &lt;a href="http://opensource.org/licenses/MIT"&gt;MIT&lt;/a&gt;.
Поддерживается Python версий 2.7, 3.2, 3.3, 3.4 и PyPy.&lt;/p&gt;
&lt;h2&gt;Установка&lt;/h2&gt;
&lt;p&gt;Для установки достаточно выполнить следующую команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install &lt;span class="s1"&gt;&amp;#39;git+https://github.com/abulimov/lyricstagger#egg=lyricstagger&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Примеры использования&lt;/h2&gt;
&lt;p&gt;Вывести список всех музыкальных файлов без встроенных текстов в директории ~/Music/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;user@machine:~&lt;span class="nv"&gt;$ &lt;/span&gt;lyricstagger report ~/Music
No lyrics in file &lt;span class="s1"&gt;&amp;#39;/home/user/Music/Some Artist/01 - Some Track.ogg&amp;#39;&lt;/span&gt;
No lyrics in file &lt;span class="s1"&gt;&amp;#39;/home/user/Music/Some Artist/02 - Other Track.ogg&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Скачать тесты и записать их в теги музыкальных файлов в директории ~/Music/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;user@machine:~&lt;span class="nv"&gt;$ &lt;/span&gt;lyricstagger tag ~/Music
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Удалить все теги с текстами из всех музыкальных файлов в ~/Music/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;user@machine:~&lt;span class="nv"&gt;$ &lt;/span&gt;lyricstagger remove ~/Music
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Если вы встретились с подобной задачей - попробуйте &lt;a href="https://github.com/abulimov/lyricstagger"&gt;lyricstagger&lt;/a&gt;,
а если решили эту задачу более простым и удобным способом - напишите мне об этом.
Я уже натравил свою чудо-утилиту на всю музыкальную коллекцию, она записала все
найденные тексты в файлы, так что теперь я запускаю ее только когда покупаю новый
альбом на &lt;a href="http://bandcamp.com"&gt;bandcamp&lt;/a&gt;, &lt;a href="http://cdbaby.com"&gt;cdbaby&lt;/a&gt; или &lt;a href="http://qobuz.com"&gt;Qobuz&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Tue, 25 Nov 2014 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2014-11-25:it/lyricstagger/</guid><category>Python</category><category>Программирование</category></item><item><title>Удобная настройка Sensu с Ansible</title><link>http://bulimov.ru/it/ansible-sensu/</link><description>&lt;p&gt;Так как я использую &lt;a href="http://sensuapp.org/"&gt;Sensu&lt;/a&gt; для мониторинга,
и &lt;a href="http://www.ansible.com/"&gt;Ansible&lt;/a&gt; для управления конфигурациями,
то конечно же я настраиваю Sensu с помощью Ansible.&lt;/p&gt;
&lt;p&gt;В этой связке меня смущало только одно - Sensu использует
&lt;a href="https://ru.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; для конфигов,
в то время как Ansible использует &lt;a href="https://ru.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt;.
Поскольку JSON является подмножеством YAML, и описывать
конфигурации в YAML гораздо проще (никаких проблем с запятыми, скобочками),
хотелось писать в YAML и транслировать в JSON.&lt;/p&gt;
&lt;p&gt;Начал я, конечно, с использования шаблонов Ansible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ ansible_default_ipv4.address }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ ansible_hostname }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;subscriptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ sensu_client_subscriptions|join(&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вроде неплохо, но не слишком удобно, и если одним клиентам захочется добавить
что-то, например переменную &lt;em&gt;some_var&lt;/em&gt;, надо для них делать новый шаблон, или
городить строки такого вида:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;some_var&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;defined&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt; &amp;quot;some_var&amp;quot;: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;some_var&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;, &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В общем, я, не особо включая мозг, решил писать модуль для Ansible.&lt;/p&gt;
&lt;p&gt;В процессе написания выплыли все те же проблемы: сложно работать с произвольного
вида структурами, которые позволяют с такой гибкостью использовать Sensu.&lt;/p&gt;
&lt;p&gt;То есть для примера с добавлением переменной клиенту, нашему модулю пришлось бы
поддерживать не только обязательные параметры клиента, такие как имя, адрес
и список подписок, но еще и аргумент, в который мы пихали бы остальные данные.
Да еще и структура описания у Sensu в тот момент менялась от версии к версии.&lt;/p&gt;
&lt;p&gt;И тут я наткнулся на &lt;a href="https://github.com/ansible/ansible/pull/2234"&gt;pull-request&lt;/a&gt;,
из которого узнал, что теперь в Ansible можно использовать =
фильтры &lt;em&gt;to_json&lt;/em&gt; и &lt;em&gt;to_nice_json&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;А это дает нам возможность делать такие вещи:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# task from sensu_client role&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;configure sensu client&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;copy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;content=&amp;#39;{{ sensu_client | to_nice_json }}&amp;#39;&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;owner=sensu&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;dest=/etc/sensu/conf.d/client.json&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;notify&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;restart sensu-client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А описание переменной &lt;em&gt;sensu_client&lt;/em&gt; где-нибудь в &lt;em&gt;group_vars&lt;/em&gt; выглядит так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;sensu_client&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;client&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_hostname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;subscriptions&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;address&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_default_ipv4.address&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;some_var&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sensu_some_var&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Эта схема показалась мне достаточно удобной, и на этом я остановился,
так что теперь весь конфиг Sensu, включая проверки, хендлеры и т.д., хранится
у меня в формате YAML в Ansible.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 13 Nov 2014 00:00:00 +0300</pubDate><guid>tag:bulimov.ru,2014-11-13:it/ansible-sensu/</guid><category>Ansible</category><category>Sensu</category><category>Monitoring</category></item><item><title>Разбирался с page-cache в Linux</title><link>http://bulimov.ru/it/meminfo-visualizer/</link><description>&lt;p&gt;Читая книгу &lt;a href="http://www.williamspublishing.com/Books/5-8459-1085-4.html"&gt;"Разработка ядра Linux"&lt;/a&gt; за авторством Роберта Лава,
я решил поглубже разобраться в том, как работает кэш в Linux,
и набрел на вот &lt;a href="http://habrahabr.ru/company/yandex/blog/231957/"&gt;эту&lt;/a&gt;
статью на Хабре от Яндекса.&lt;/p&gt;
&lt;p&gt;Сама статья весьма познавательна, особенно видео - рекомендую.
Так вот, в этом видео &lt;em&gt;Роман Гущин&lt;/em&gt;, с помощью простой утилиты, наглядно показывающей
размер кэша, показывал как работает файловый кэш.&lt;/p&gt;
&lt;p&gt;Конечно, мне захотелось в образовательных целях написать такую утилиту для себя,
чтобы можно было поиграться с кэшем и видеть изменения.&lt;/p&gt;
&lt;p&gt;Выбрал я для реализации свой любимый Python в связке с Qt(PySide).&lt;/p&gt;
&lt;p&gt;Вот весь код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemoryDrawer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MemoryDrawer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initUI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/proc/meminfo visualizer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QTimer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onTimer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;paintEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;qp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPainter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawRectangles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drawRectangles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;dataSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;MemFree:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;darkGreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Active(file):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;darkMagenta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Inactive(file):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;darkRed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cached:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;darkCyan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sizeX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;

        &lt;span class="n"&gt;sizeY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colorName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeX&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colorName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;pixmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawPixmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pixmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drawGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;memTotal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;MemTotal:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;kbPerPixel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;memTotal&lt;/span&gt;

        &lt;span class="n"&gt;dataValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;drawData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kbPerPixel&lt;/span&gt;

        &lt;span class="n"&gt;pixmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPixmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPainter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;drawData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; kb&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pixmap&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/proc/meminfo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;splitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onTimer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;drawer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MemoryDrawer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;drawer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Актуальная версия визуализатора &lt;a href="https://github.com/abulimov/utils/blob/master/scripts/meminfo.py"&gt;лежит&lt;/a&gt; в моем репозитории.&lt;/p&gt;
&lt;p&gt;Теперь можно самому повторить эксперимент из видео на новых ядрах,
и посмотреть, что же изменилось.&lt;/p&gt;
&lt;p&gt;Предварительно надо создать пару больших файлов, для 8Gb оперативки
нам нужны 1Gb и 8Gb файлы. Создать их можно из /dev/urandom примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dd if=/dev/urandom bs=1k count=1048576 of=/path/to/large
dd if=/dev/urandom bs=1k count=8388608 of=/path/to/large2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А еще надо собрать &lt;a href="https://github.com/hoytech/vmtouch"&gt;vmtouch&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://raw.github.com/hoytech/vmtouch/master/vmtouch.c
gcc -Wall -O3 -o vmtouch vmtouch.c
chmod +x ./vmtouch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ну а теперь повторяем эксперимент из видео. Я использовал ядро Linux 3.13.&lt;/p&gt;
&lt;p&gt;Для начала, сбросим кэши:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo 3 | sudo tee /proc/sys/vm/drop_caches
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Запустим визуализатор:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 meminfo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;У нас есть два больших файлика - large и large2:&lt;/p&gt;
&lt;p&gt;Прочитаем large, чтобы он попал в inactive cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat large &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Прочитаем его еще раз, чтобы он попал в active cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat large &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь можно натравить на него vmtouch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vmtouch -m 1g -v large
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Выдавим его из кэша:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vmtouch -m 1g -e large
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Снова прочитаем large, чтобы он попал в inactive cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat large &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь прочитаем large2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat large2 &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и видим, что он вытесняет large из inactive cache.&lt;/p&gt;
&lt;p&gt;А теперь сбросим снова кэши, и запихнем large в active cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo 3 | sudo tee /proc/sys/vm/drop_caches
cat large &amp;gt; /dev/null
cat large &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И попробуем прочитать large2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat large2 &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь мы можем видеть, что large2 не может вытеснить large из active cache,
о чем и говорилось в видео.&lt;/p&gt;
&lt;p&gt;А еще видно, как колеблется количество свободной памяти, из-за периодического
характера работы kswapd.&lt;/p&gt;
&lt;p&gt;Если посмотреть с помощью vmtouch, какая часть large2 попала в inactive cache,
то мы увидим, что он при чтении вытеснял сам себя.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vmtouch -m 8g -v large2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь можно удалить large, и увидеть, как освободился active cache, а потом
удалить large2 и увидеть, как освободился inactive cache.&lt;/p&gt;
&lt;p&gt;Вот такой вот опыт позволяет увидеть некоторые проблемы в работе с кэшами в актуальных
ядрах Linux. Будет интересно повторить эксперимент на свежих ядрах после улучшений
в области Memory Management.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 09 Oct 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-10-09:it/meminfo-visualizer/</guid><category>Kernel</category><category>Python</category><category>Программирование</category><category>Книги</category></item><item><title>Инфраструктура как код</title><link>http://bulimov.ru/it/infrastructure-as-a-code/</link><description>&lt;p&gt;Есть такой тренд сейчас - работать с IT-инфраструктурой как с кодом.
Хорошо цель этого метода описывается этой цитатой:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Enable the reconstruction of the business from nothing but a source code repository, an application data backup, and bare metal resources”&lt;/p&gt;
&lt;p&gt;-- Jesse Robins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Я полностью поддерживаю эту идею, причем именно в этой трактовке.&lt;/p&gt;
&lt;p&gt;Если говорить про парадигму, которую нам предлагает этот метод, то вот она:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Поддерживать модульную, легко поддающуюся автоматизации инфраструктуру,
и &lt;em&gt;описывать&lt;/em&gt; эту инфраструктуру с помощью языка высокого уровня.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Это означает для нас, как сисадминов, что мы должны пользоваться всеми
наработками разработчиков ПО, такими как:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;версионирование описания инфраструктуры;&lt;/li&gt;
&lt;li&gt;полноценное тестирование описания с использованием нескольких стадий (dev, QA, staging, prod);&lt;/li&gt;
&lt;li&gt;внутренние стандарты "кодинга";&lt;/li&gt;
&lt;li&gt;непрерывная интеграция (continuous integration).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Проблема же, на мой взгляд, заключается в том, что многие понимают
"Инфраструктуру как код" в другом смысле - "Давайте писать описание нашей
инфраструктуры с помощью Chef/Puppet, словно это обычный код".
Причем у Chef это выражено заметно сильнее, поскольку в качестве DSL используется
чистый Ruby.&lt;/p&gt;
&lt;p&gt;Конечно, программисты, каким-либо образом ставшие ответственными за
администрирование серверов с помощью Chef, с радостью начинают использовать
привычный инструмент (Ruby) привычным же образом, и получается ровно то,
что они привыкли делать.
Вместо декларативного описания инфраструктуры, на которое можно натравить какой-нибудь
инструмент для управления конфигурациями и получить настроенную инфраструктуру,
на выходе получаем программу с кучей хаков, с множественным ветвлением,
с выполнением кода на Shell, которая может императивно привести
систему к нужному состоянию.&lt;/p&gt;
&lt;p&gt;Примером может являться практически любой стандартный кукбук Chef.
Взять хотя-бы &lt;a href="https://github.com/miketheman/nginx"&gt;Nginx cookbook&lt;/a&gt;.
Он умеет ставить Nginx несколькими способами, включая сборку из исходников,
и содержит в себе тонну переменных, призванных заменить написание вменяемого
шаблона конфига Nginx заданием значений этой кучи переменных.&lt;/p&gt;
&lt;p&gt;Это уже сам по себе плохой подход - пытаться впихнуть все возможности
Nginx (да еще и со сторонними модулями) в один мега-шаблон, и править только
переменные.&lt;/p&gt;
&lt;p&gt;Сборка из исходников в кукбуке тоже вызывает массу вопросов. Зачем это делать на
боевом сервере? Собрать пакет на build-сервере, протестировать его, и
распространить из своего репозитория по всем серверам - вот это нормальный подход.&lt;/p&gt;
&lt;p&gt;И все это порождает столько сложностей, столько труда нужно для написания,
тестирования и поддержания в актуальном состоянии этого кукбука,
вместо того, чтоб разделить весь процесс на несколько простых шагов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Собрать пакет Nginx с нужными модулями на build-сервере, протестировать и поместить в репозиторий;&lt;/li&gt;
&lt;li&gt;Написать шаблон конфига Nginx под ваши задачи, учитывающий различия между
имеющимися средами (staging/prod);&lt;/li&gt;
&lt;li&gt;Написать кукбук/манифест/роль, который будет ставить пакет из вашего
репозитория, заполнять шаблон переменными, которые отличаются в ваших окружениях,
и класть этот шаблон на сервер.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вот и все, не нужны тонны кода на Ruby со вставками на Shell, не нужны сотни
переменных. У нас есть описание процесса сборки пакета (spec-файл или
Makefile), и декларативное описание требуемого состояния системы.&lt;/p&gt;
&lt;p&gt;И это прекрасно подходит под один из принципов &lt;a href="https://ru.wikipedia.org/wiki/Экстремальное_программирование"&gt;Экстремального Программирования&lt;/a&gt;, который звучит так:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do The Simplest Thing That Could Possibly Work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;То есть, надо сделать так, чтобы наш кукбук/манифест/роль был достаточно простым
для того, чтобы удовлетворять нашим &lt;em&gt;сегодняшним&lt;/em&gt; требованиям.
Конечно, увлекаться и делать что-то "в лоб", не думая, будет неверно, но и
создавать псевдо-универсальных монстров точно не стоит. Во всем нужна мера.&lt;/p&gt;
&lt;p&gt;Что самое плохое - люди, которые пишут сам Chef, и написали этот кукбук для Nginx.
Написали хорошо, но написали как программисты, а не как системные администраторы.
А когда сисадмины пишут кукбуки в таком стиле, на их творения вообще без
слез не взглянешь.&lt;/p&gt;
&lt;p&gt;Именно поэтому я выбрал для
управления серверами Ansible, созданный Michael DeHaan, человеком, который
работал в Puppet Labs, создал Func и Cobbler, а затем, имея большой опыт и видя
ошибки предшественников, написал Ansible. Ansible заметно проще Chef или Puppet,
и декларативный yaml-файл с описанием требуемого состояния системы ограничивает
возможность выстрелить себе в ногу и наворотить лапшеобразного императивного кода.&lt;/p&gt;
&lt;p&gt;Если эту заметку прочтут программисты, администрирующие сервера - перестаньте
толковать "Инфраструктуру как код" неверно! Мы берем лучшие наработки из
мира программирования, но это не традиционное программирование. Не надо
переизобретать Bash-скрипты на Ruby.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Mon, 29 Sep 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-09-29:it/infrastructure-as-a-code/</guid><category>Chef</category><category>Ansible</category><category>Мнение</category></item><item><title>s/Ruhoh/Pelican/</title><link>http://bulimov.ru/it/from-ruhoh-to-pelican/</link><description>&lt;p&gt;Переехал с &lt;a href="http://ruhoh.com"&gt;Ruhoh&lt;/a&gt; на &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;,
потому что Python.&lt;/p&gt;
&lt;p&gt;А если подробнее - потому что Ruhoh написан на Ruby, и не особо развивается.
А Pelican написан на Python, который является моим основным языком,
и уже давно и активно развивается, и обладает обширной базой
&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;плагинов&lt;/a&gt; и
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;тем&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 25 Sep 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-09-25:it/from-ruhoh-to-pelican/</guid><category>Pelican</category><category>Python</category><category>Жизнь</category></item><item><title>Выложил немного полезностей</title><link>http://bulimov.ru/it/%D0%92%D1%8B%D0%BB%D0%BE%D0%B6%D0%B8%D0%BB-%D0%BD%D0%B5%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D1%81%D1%82%D0%B5%D0%B9/</link><description>&lt;p&gt;Когда я писал про то, как &lt;a href="/it/Переписал-скрипты-на-ruby-для-sensu"&gt;переписал скрипты для Sensu&lt;/a&gt;,
я слегка слукавил. Изначально, я написал эти скрипты на Python,
и только потом на Ruby. Поскольку пользователям других Nagios-совместимых
систем мониторинга может показаться неудобным использование ruby-скриптов,
да еще и с зависимостью от гема sensu-plugin, я решил выложить
и Python-версии скриптов.&lt;/p&gt;
&lt;p&gt;Если кому хочется мониторить состояние дисков в raid-контроллерах от 3ware или
HP SmartArray на чистом Python - милости просим, все
&lt;a href="https://github.com/abulimov/utils/tree/master/nagios"&gt;в моем репозитории&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Также я собрался с силами, и привел в чувства утилиту &lt;strong&gt;zabbix_maintenance.py&lt;/strong&gt;
для работы с периодами "в обслуживании" в Zabbix,
которую написал параллельно с &lt;a href="/it/Модуль-zabbix_maintenance"&gt;модулем для Ansible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Она служит полнофункциональной заменой модуля для Ansible,
и может создавать, удалять и показывать периоды "в обслуживании".&lt;/p&gt;
&lt;p&gt;Эта утилита призвана заменить старый вариант на Ruby,
и обладает большим набором опций командной строки.&lt;/p&gt;
&lt;p&gt;Написана утилита на Python, и доступна всем желающим &lt;a href="https://github.com/abulimov/utils/blob/master/scripts/zabbix_maintenance.py"&gt;тут&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 17 Sep 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-09-17:it/Выложил-немного-полезностей/</guid><category>Python</category><category>Zabbix</category><category>Nagios</category><category>Monitoring</category></item><item><title>Открыл для себя плагины к tmux</title><link>http://bulimov.ru/it/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D0%BB-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B5%D0%B1%D1%8F-%D0%BF%D0%BB%D0%B0%D0%B3%D0%B8%D0%BD%D1%8B-%D0%BA-tmux/</link><description>&lt;p&gt;Случилось чудесное - &lt;a href="http://linux.org.ru"&gt;LOR&lt;/a&gt; принес мне пользу.
Оттуда я узнал о плагине &lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;tmux-resurrect&lt;/a&gt;,
а точнее, вообще о существовании плагинов для чудесного мультиплексора терминалов &lt;strong&gt;tmux&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;С помощью имеющихся плагинов можно привести конфигурацию в более понятный вид,
а также заменить свои костыли на костыли, поддерживаемые сообществом.&lt;/p&gt;
&lt;p&gt;Я, к примеру:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;сильно сократил конфигурацию, используя
  &lt;a href="https://github.com/tmux-plugins/tmux-sensible"&gt;tmux-sensible&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;с помощью &lt;a href="https://github.com/tmux-plugins/tmux-yank"&gt;tmux-yank&lt;/a&gt;
  выкинул свои костыли для копирования в буфер обмена;&lt;/li&gt;
&lt;li&gt;смог убрать настройки для vi-образной навигации между панелями
  благодаря &lt;a href="https://github.com/tmux-plugins/tmux-pain-control"&gt;tmux-pain-control&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;обрел поиск с помощью &lt;a href="https://github.com/tmux-plugins/tmux-copycat"&gt;tmux-copycat&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;теперь могу открывать выделенные файлы либо URL
  с помощью &lt;a href="https://github.com/tmux-plugins/tmux-open"&gt;tmux-open&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;наконец, могу сохранять все открытые окна и панели tmux
  с использованием &lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;tmux-resurrect&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 04 Sep 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-09-04:it/Открыл-для-себя-плагины-к-tmux/</guid><category>tmux</category><category>Жизнь</category></item><item><title>Переписал скрипты на Ruby для Sensu</title><link>http://bulimov.ru/it/%D0%9F%D0%B5%D1%80%D0%B5%D0%BF%D0%B8%D1%81%D0%B0%D0%BB-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B-%D0%BD%D0%B0-ruby-%D0%B4%D0%BB%D1%8F-sensu/</link><description>&lt;p&gt;Поскольку я перевел мониторинг с Zabbix на Sensu, пришлось переписать
свои &lt;a href="/it/Низкоуровневое-обнаружение-в-zabbix-ищем-диски-в-контроллере-от-3ware"&gt;скрипты&lt;/a&gt; проверки состояния жестких дисков в raid-контроллерах от 3ware и
HP SmartArray для использования в Sensu. Ну а раз все равно переписывать - то
писать я решил на Ruby, чтобы можно было без проблем
заслать в &lt;a href="https://github.com/sensu/sensu-community-plugins"&gt;sensu-community-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Скрипты весьма просты, так что проблем при переписывании никаких не было.&lt;/p&gt;
&lt;p&gt;Если кому надо - все уже отдано сообществу, теперь Sensu может мониторить
состояние дисков &lt;a href="https://github.com/sensu/sensu-community-plugins/blob/master/plugins/raid/check-3ware-status.rb"&gt;в контроллерах от 3ware&lt;/a&gt;
и &lt;a href="https://github.com/sensu/sensu-community-plugins/blob/master/plugins/raid/check-smartarray-status.rb"&gt;HP SmartArray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ну и на закуску - мониторим &lt;a href="https://github.com/sensu/sensu-community-plugins/blob/master/plugins/riak/check-riak-ringready.rb"&gt;статус Riak Ring&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 04 Sep 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-09-04:it/Переписал-скрипты-на-ruby-для-sensu/</guid><category>Ruby</category><category>Sensu</category><category>Monitoring</category></item><item><title>Модуль zabbix_maintenance</title><link>http://bulimov.ru/it/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C-zabbix_maintenance/</link><description>&lt;p&gt;Свершилось чудо, и мой &lt;a href="https://github.com/ansible/ansible/blob/devel/library/monitoring/zabbix_maintenance"&gt;модуль&lt;/a&gt;
для Ansible, который умеет создавать и удалять периоды "в обслуживании" в Zabbix,
наконец-то &lt;a href="https://github.com/ansible/ansible/pull/5062"&gt;приняли&lt;/a&gt; в апстрим.
Это уже третий мой модуль, принятый в апстрим Ansible.&lt;/p&gt;
&lt;p&gt;Краткая история:&lt;/p&gt;
&lt;p&gt;Модуль этот я запушил еще в 26 ноября 2013 года, но 21 декабря
&lt;a href="https://github.com/cove"&gt;cove&lt;/a&gt; написал в комментарии к моему модулю,
что планирует выложить целую &lt;a href="https://github.com/ansible/ansible/pull/6034"&gt;пачку&lt;/a&gt;
модулей для взаимодействия с Zabbix из Ansible.
Это отложило принятие моего модуля в апстрим почти на 9 месяцев,
поскольку мы согласовывали интерфейс наших модулей, тестировали и улучшали модули,
выложенные cove, а очередь pull-requestов у Ansible выросла до 300+.&lt;/p&gt;
&lt;p&gt;Теперь, когда &lt;em&gt;zabbix_maintenance&lt;/em&gt; уже влит в основную ветку, а модули cove готовы к этому,
можно будет практически полностью исключить ручное взаимодействие с инопланетным
интерфейсом Zabbixа.&lt;/p&gt;
&lt;p&gt;Свой модуль я использую примерно так:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rolling-update.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;hosts&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;serial&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;vars_prompt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;zabbix_user&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;prompt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Username&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Zabbix&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;API&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;private&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;no&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;zabbix_password&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;prompt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Zabbix&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;API&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;private&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;pre_tasks&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;disable server in haproxy&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/opt/haproxywrap.sh&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;disable&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;application/{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_hostname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;delegate_to&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;with_items&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;groups[&amp;quot;lb&amp;quot;]&lt;/span&gt;

    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;create maintenance for server in zabbix&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;delegate_to&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;zabbix_maintenance&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;login_user={{ zabbix_user }}&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;login_password={{ zabbix_password }}&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;server_url=https://zabbix.example.com&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;host_name={{ ansible_hostname }}&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;state=present&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;name=&amp;quot;Update of {{ ansible_hostname }}&amp;quot;&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;minutes=30&lt;/span&gt;

&lt;span class="c1"&gt;# тут у меня проход по всем ролям с выполнением кучи&lt;/span&gt;
&lt;span class="c1"&gt;# действий, но для примера пусть будет так&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;tasks&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;apt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;upgrade=dist update_cache=yes&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;post_tasks&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;enable the server in haproxy&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/opt/haproxywrap.sh&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;enable&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;application/{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ansible_hostname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;delegate_to&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;with_items&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;groups[&amp;quot;lb&amp;quot;]&lt;/span&gt;

    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;remove maintenance for server in zabbix&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;delegate_to&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;zabbix_maintenance&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;login_user={{ zabbix_user }}&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;login_password={{ zabbix_password }}&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;server_url=https://zabbix.example.com&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;state=absent&lt;/span&gt;
                          &lt;span class="l-Scalar-Plain"&gt;name=&amp;quot;Update of {{ ansible_hostname }}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В этом плейбуке для каждого хоста по очереди выполняются следующие действия:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;выключаем сервер приложений на балансировщике haproxy, делегируя
действие хостам из группы "lb"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;создаем период "в обслуживании" на 30 минут для обновляемого хоста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;обновляем хост&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;включаем его обратно на балансировщике&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;удаляем период "в обслуживании"&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;P.S. скрипт haproxywrap.sh можно взять &lt;a href="https://github.com/abulimov/utils/blob/master/scripts/haproxywrap.sh"&gt;тут&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-08-11:it/Модуль-zabbix_maintenance/</guid><category>Ansible</category><category>Python</category><category>Monitoring</category></item><item><title>Ansible и serverspec</title><link>http://bulimov.ru/it/ansible-%D0%B8-serverspec/</link><description>&lt;p&gt;Когда я готовил playbook для &lt;a href="/it/Личный-vps"&gt;своего VPS&lt;/a&gt;, я взял за основу
&lt;a href="https://github.com/al3x/sovereign"&gt;Sovereign&lt;/a&gt;. В этом репозитории меня
заинтересовал файл &lt;strong&gt;tests.py&lt;/strong&gt;, содержащий тесты для результирующего сервера.
У меня сразу же возник вопрос - почему тесты самописные, на голом Python, а
не на каком-нибудь готовом решении. Я решил изучить, что же есть сейчас для
TDD-администрирования. Оказалось, что толком ничего и нет, а то, что
есть - для Ansible не особо нужно.&lt;/p&gt;
&lt;p&gt;Для начала, что есть. Тут все скучно, есть &lt;a href="http://serverspec.org/"&gt;serverspec&lt;/a&gt;,
и &lt;a href="https://pypi.python.org/pypi/envassert"&gt;envassert&lt;/a&gt;. Оба эти инструмента
предоставляют возможность декларативно описать требуемое состояние удаленного
сервера, и проверить его соответствие реальности по ssh.&lt;/p&gt;
&lt;p&gt;Вот пример для serverspec с официального сайта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_installed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;httpd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_enabled&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_listening&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/httpd/conf/httpd.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_file&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;its&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="sr"&gt;/ServerName www.example.jp/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Все чудесно, и для того же Chef это отличный инструмент, поскольку
сам Chef провоцирует писать императивный код на Ruby, который хорошо было бы
проверять простым декларативным описанием.&lt;/p&gt;
&lt;p&gt;Но в случае Ansible, наш playbook &lt;strong&gt;уже&lt;/strong&gt; содержит декларативное описание
требуемого состояния.&lt;/p&gt;
&lt;p&gt;Вот фрагмент роли Nginx для Ansible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Ensure nginx package is installed&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;apt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pkg=nginx state=latest&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Ensure nginx service is enabled and started&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name=nginx state=started enabled=yes&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Place nginx.conf&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;src=nginx.conf.j2 dest=/etc/nginx/nginx.conf mode=644&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;notify&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;reload nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как можно заметить, описание Ansible не содержит только проверок портов, зато
позволяет привести систему к описываемому виду, а не только проверить на соответствие.&lt;/p&gt;
&lt;p&gt;Таким образом, имеет смысл использовать serverspec с Ansible только для проверки
таких параметров, как слушающие порты, правила iptables, и настройки сетевых
интерфейсов - все остальное Ansible и проверяет, и приводит к нужному состоянию.
Но в боевой системе, или в staging-окружении, эти параметры и так будут проверяться
системой мониторинга, причем на постоянной основе.&lt;/p&gt;
&lt;p&gt;Видимо, именно поэтому репозиторий sovereign содержит самописные тесты, которые
проверяют не столько состояние системы, сколько корректность работы
сконфигурированных сервисов. К сожалению, инструмент, который бы облегчил задачу
написания таких тестов, еще не написан, хотя было бы здорово расширить serverspec
для проверки корректности работы http-сервисов, либо imap-сервера, дополнить его
более высокоуровневыми проверками.&lt;/p&gt;
&lt;p&gt;Я для себя пока решил, что написание serverspec-тестов для Ansible избыточно
при наличии staging-окружения с работающим мониторингом и фунциональными тестами,
однако инструмент это явно полезный и перспективный.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 22 May 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-05-22:it/ansible-и-serverspec/</guid><category>Ansible</category><category>serverspec</category><category>Мнение</category></item><item><title>Личный VPS</title><link>http://bulimov.ru/it/%D0%9B%D0%B8%D1%87%D0%BD%D1%8B%D0%B9-vps/</link><description>&lt;p&gt;Уже 2 недели как я начал использовать свой личный VPS на DigitalOcean, и хочу
поделиться впечатлениями.
Это оказалось очень удобно - можно получать все удобства современного
цифрового мира, но на своих условиях и с уверенностью в сохранности своих
персональных данных.&lt;/p&gt;
&lt;p&gt;Раскатывал я все сервисы и конфиги с помощью &lt;a href="http://ansible.com"&gt;Ansible&lt;/a&gt;, взяв за
основу &lt;a href="https://github.com/al3x/sovereign"&gt;Sovereign&lt;/a&gt;.
В качестве дистрибутива я ради эксперимента выбрал Ubuntu 14.04 LTS.&lt;/p&gt;
&lt;p&gt;Сейчас я использую VPS для следующих сервисов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;почта (Postfix + Dovecot + Roundcube)&lt;/li&gt;
&lt;li&gt;аналог Dropbox - &lt;a href="http://owncloud.org"&gt;Owncloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Сервер синхронизации задач &lt;a href="http://taskwarrior.org/"&gt;taskd&lt;/a&gt;, для
  task на десктопе и &lt;a href="http://mirakel.azapps.de/index.html"&gt;Mirakel&lt;/a&gt; на смартфоне.&lt;/li&gt;
&lt;li&gt;Сервер заметок &lt;a href="http://dynalon.github.io/Rainy/"&gt;Rainy&lt;/a&gt;, для
  Tomboy на десктопе и Tomdroid на смартфоне.&lt;/li&gt;
&lt;li&gt;Агрегатор RSS &lt;a href="http://tt-rss.org"&gt;Tiny-Tiny-RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Хостинг Git с помощью &lt;a href="http://gitolite.com/gitolite/index.html"&gt;gitolite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В перспективе я также могу заменить контакты Google на CardDav из Owncloud,
а пока я очень рад избавлению от Evernote, которым было неудобно пользоваться
и на смартфоне, и на десктопе через geeknote, и совсем невыносимо через веб-интерфейс.
Ну и Mirakel + Task Server это тоже весьма удобно, а Tiny-Tiny-RSS экономит
мне кучу времени и позволяет следить за новостями одинаково удобно и с десктопа,
и со смартфона благодаря &lt;a href="https://github.com/mboinet/ttrss-mobile"&gt;ttrss-mobile&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 22 May 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-05-22:it/Личный-vps/</guid><category>VPS</category><category>Ubuntu</category></item><item><title>Прочитал The Phoenix Project: A Novel About DevOps, and Helping Your Business Win</title><link>http://bulimov.ru/it/%D0%9F%D1%80%D0%BE%D1%87%D0%B8%D1%82%D0%B0%D0%BB-the-phoenix-project-a-novel-about-devops-and-helping-your-business-win/</link><description>&lt;p&gt;Ну что тут скажешь - прекрасная книга. Написана живым языком, очень легко читается.
В увлекательной форме рассказывает о ключевых принципах DevOps,
причем именно так, чтобы было понятно, в ответ на какие проблемы каждый
из принципов был сформирован.&lt;/p&gt;
&lt;p&gt;Конечно, главная проблема книги в том, что DevOps преподносится как
некая чудодейственная методология, и при этом не уделяется внимания
главному вопросу - кадровому. В книге все сотрудники оказались
достаточно квалифицированными и открытыми для того, чтобы успешно принять и
реализовать парадигму DevOps, хотя в реальной жизни лично я
наблюдаю жесточайший дефицит адекватных кадров, которых можно было бы хотя-бы
переучить под DevOps, не говоря уже о том, чтоб они сами к этому пришли.
И даже грамотные специалисты в своей области обладают высокой
инертностью мышления, которая мешает успешно следовать советам, описанным
в этой книге.&lt;/p&gt;
&lt;p&gt;Несмотря на этот явный недостаток, я &lt;strong&gt;крайне рекомендую&lt;/strong&gt; эту книгу к прочтению всем
IT-специалистам.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Tue, 15 Apr 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-04-15:it/Прочитал-the-phoenix-project-a-novel-about-devops-and-helping-your-business-win/</guid><category>Книги</category><category>Жизнь</category><category>Мнение</category></item><item><title>Сдал экзамен Cisco ICND2, он же 200-101</title><link>http://bulimov.ru/it/%D0%A1%D0%B4%D0%B0%D0%BB-%D1%8D%D0%BA%D0%B7%D0%B0%D0%BC%D0%B5%D0%BD-cisco-icnd2-%D0%BE%D0%BD-%D0%B6%D0%B5-200-101/</link><description>&lt;p&gt;Теперь я CCNA.&lt;/p&gt;
&lt;p&gt;Сдал с трудом, 867 из 1000 при проходных 825.
Экзамен очень мощный, сильно сложнее ICND1, на мой вкус.
Надо было сдавать единый 200-120, было бы сильно проще.
Еще больше уверился, что CCNA вполне подходит на роль
критерия профпригодности для более-менее серьезной
работы сисадмина.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 03 Apr 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-04-03:it/Сдал-экзамен-cisco-icnd2-он-же-200-101/</guid><category>Cisco</category><category>Жизнь</category></item><item><title>Сдал экзамен Cisco ICND1, он же 100-101</title><link>http://bulimov.ru/it/%D0%A1%D0%B4%D0%B0%D0%BB-%D1%8D%D0%BA%D0%B7%D0%B0%D0%BC%D0%B5%D0%BD-cisco-icnd1-%D0%BE%D0%BD-%D0%B6%D0%B5-100-101/</link><description>&lt;p&gt;Сдавал через месяц после курсов ICND1 и ICND2, набрал 907.
Экзамен хороший, мощный. Теперь вполне понимаю,
почему многими сданный CCNA расценивается как некое мерило
профпригодности.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-03-20:it/Сдал-экзамен-cisco-icnd1-он-же-100-101/</guid><category>Cisco</category><category>Жизнь</category></item><item><title>Тестирование Ansible Playbook</title><link>http://bulimov.ru/it/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-ansible-playbook/</link><description>&lt;p&gt;Давно хотел сделать авто-тестирование целостности развертывания, производимого
с помощью &lt;a href="http://ansible.com"&gt;Ansible&lt;/a&gt;. Чтобы, значит, запушил я новую версию плейбука в репозитория,
и CI проверила работоспособность системы. Причем не просто корректность синтаксиса,
а работоспособность проводимого деплоя.&lt;/p&gt;
&lt;p&gt;Вот наконец до этого дошли руки.&lt;/p&gt;
&lt;p&gt;Точнее, руки до этого дошли еще в середине 2013 года, но тогда я собрал все это
с помощью стройной системы костылей, взяв за основу заранее минимально
сконфигуренные qemu-образы на lvm-снапшотах.&lt;/p&gt;
&lt;p&gt;Теперь я решил подойти к вопросу серьезнее, взять общепринятые инструменты
и избавиться от костылей.&lt;/p&gt;
&lt;h5&gt;План действий&lt;/h5&gt;
&lt;p&gt;Возвращаясь к исходной задаче - что же нам нужно для тестирования деплоя с нуля?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Базовый образ уже установленной системы&lt;/li&gt;
&lt;li&gt;Инструмент для создания виртуалки из базового образа с назначением
   нужных сетевых настроек и хостнейма.&lt;/li&gt;
&lt;li&gt;Скрипт для CI, который будет ресетить виртуалки, запускать на них деплой,
   и проверять корректность результата.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Пункт 1&lt;/h5&gt;
&lt;p&gt;Для реализации первого пункта я сначала взял &lt;a href="https://github.com/jedi4ever/veewee"&gt;Veewee&lt;/a&gt;, но потом заменил его на &lt;a href="http://packer.io"&gt;Packer&lt;/a&gt;, который показался
мне заметно более удобным и лишенным костылей veewee.
Оба эти инструмента берут установочный образ нужного нам дистрибутива,
в моем случае Debian Wheezy, и по описанию создают образ с установленной системой.
Для Debian используется preseed и набор bash-скриптов.&lt;/p&gt;
&lt;h5&gt;Пункт 2&lt;/h5&gt;
&lt;p&gt;Для реализации второго пункта я взял &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;.
К сожалению, из коробки Vagrant не поддерживает использование qemu-kvm
в качестве гипервизора, поэтому пришлось использовать также
плагин &lt;a href="https://github.com/pradels/vagrant-libvirt"&gt;vagrant-libvirt&lt;/a&gt;.
Для конвертации в образ для Vagrant у Packerа есть готовый преобразователь,
но с qemu-kvm он тоже пока не работает, так что образ я собираю по
&lt;a href="https://github.com/pradels/vagrant-libvirt/tree/master/example_box"&gt;этой инструкции&lt;/a&gt;.
Хочется отметить, что от Vagrant мне нужно только создание-уничтожение виртуалок
и простейшее начальное конфигурирование - настройка сети и хостнейма. Provisioning
с использованием Vagrant и Ansible сейчас для моего случая делать невозможно -
Vagrant генерирует описания групп и хостов для каждой виртуалки отдельно,
а для корректной работы моих playbookов нужно, чтобы хосты знали друг о друге.&lt;/p&gt;
&lt;h5&gt;Пункт 3&lt;/h5&gt;
&lt;p&gt;Третий пункт - единственный "костыльный", поскольку предполагает написание
скрипта для CI (в моем случае - CruiseControl.rb). Скипт простой, основная
его задача - корректно выставить переменные окружения, отресетить виртуалки, а затем
выполнить последовательно 3 playbookа для определенно группы хостов, проверяя
коды возврата Ansible.&lt;/p&gt;
&lt;h5&gt;Итог&lt;/h5&gt;
&lt;p&gt;В итоге, я получил ровно то, что и хотел - на каждый коммит в репозиторий с плейбуками
запускается полное развертывание всего окружения на голые операционки. Затем
все нужные компоненты приводятся в требуемое состояние - собираются кластеры,
настраивается репликация - и проверяется запуск всех сервисов и корректность их
состояния после старта. В будущем я планирую добавить тесты, ломающие систему
и проверяющий отказоустойчивость, но это требует больших трудозатрат от наших
разработчиков, которые и так достаточно нагружены.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 13 Mar 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-03-13:it/Тестирование-ansible-playbook/</guid><category>Ansible</category><category>Мнение</category></item><item><title>Влияние курсов Cisco на психику</title><link>http://bulimov.ru/it/%D0%92%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D0%B5-%D0%BA%D1%83%D1%80%D1%81%D0%BE%D0%B2-cisco-%D0%BD%D0%B0-%D0%BF%D1%81%D0%B8%D1%85%D0%B8%D0%BA%D1%83/</link><description>&lt;p&gt;Закончил курсы Cisco ICND1 и ICND2, и сразу захотелось странного.
Захотелось домой какую-нибудь интересную сетевую железяку.
Быстрый поиск по каталогам серьезных фирм типа Cisco и Juniper показал, что
ничего вменяемого для домашнего использования у них нет
(Cisco Linksys я за вменяемое не считаю, та же фигня, что и D-Link или Asus).
В итоге этих метаний, выбор пал на оборудование фирмы MikroTik.&lt;/p&gt;
&lt;p&gt;Движимый душевным порывом, я поменял
свой древний WiFi роутер D-Link DIR-615 c DD-WRT на борту на MikroTik RouterBoard RB951G-2HnD.
Получил массу удовольствия от настройки. CLI у RouterOS
оказался весьма приятным, ну а возможностей более чем достаточно,
что и не удивительно - внутри у него Linux.&lt;/p&gt;
&lt;p&gt;Работает эта железка уже вторую неделю, проблем никаких, производительность
отменная. Единственный минус - отсутствие 5Ghz, но с ним я готов мириться.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 05 Mar 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-03-05:it/Влияние-курсов-cisco-на-психику/</guid><category>Cisco</category><category>MikroTik</category></item><item><title>Побывал на DevOps Meetup 25 января</title><link>http://bulimov.ru/it/%D0%9F%D0%BE%D0%B1%D1%8B%D0%B2%D0%B0%D0%BB-%D0%BD%D0%B0-devops-meetup-25-%D1%8F%D0%BD%D0%B2%D0%B0%D1%80%D1%8F/</link><description>&lt;p&gt;Из четырех докладов именно доклад про Docker, ради которого
я и ходил на этот Meetup, оказался единственным плохим.
Вышел какой-то мальчик из Яндекса, жутко заунывно
рассказывал банальности про Docker, на все интересные
вопросы отвечал "я не знаю".&lt;/p&gt;
&lt;p&gt;Зато остальные доклады были весьма хороши.
Лично меня особенно порадовал доклад Ивана Евтуховича
про librarian и Berkshelf. Порадовал тем, что Иван выразил
мою позицию по поводу community-кукбуков.&lt;/p&gt;
&lt;p&gt;Вячеслав Кузнецов прочитал отличный доклад о том, к какой
методологии использования Chef они пришли.&lt;/p&gt;
&lt;p&gt;Ну и конечно хочу отметить доклад Андрея Смирнова про
&lt;a href="http://www.aptly.info/"&gt;aply&lt;/a&gt;. Это система управления репозиториями Debian,
что-то вроде reprepro с человеческим лицом. Сейчас, конечно, очень все сыро,
но идея здравая, и пишет эту систему Андрей на чистом энтузиазме, что очень
и очень похвально.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tech.yandex.ru/events/yagosti/devops/"&gt;Тут&lt;/a&gt;, видимо, выложат записи докладов.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Mon, 27 Jan 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2014-01-27:it/Побывал-на-devops-meetup-25-января/</guid><category>Жизнь</category></item><item><title>Расширяем возможности Nginx с помощью Lua</title><link>http://bulimov.ru/it/%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D1%8F%D0%B5%D0%BC-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-nginx-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-lua/</link><description>&lt;p&gt;Встала некоторое время назад передо мной задача -
фильтровать по полю Serial клиентские сертификаты,
которые используются для авторизации на одном из сервисов.
То есть не просто проверять сертификат, но еще и проверять
наличие серийника в списке разрешенных, на случай утечки клиентского
сертификата. Сертификаты выдаем не мы, так что отзывать не можем,
и списка отозванных тоже нет.&lt;/p&gt;
&lt;p&gt;Решать я эту задачу стал с помощью Nginx, и почти сразу был
слеплен вариант тупой вариант "в лоб":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$valid_serial&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ssl_client_serial&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;#39;01&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$valid_serial&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ssl_client_serial&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;#39;02&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$valid_serial&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="s"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ssl_client_serial&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;#39;NN&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$valid_serial&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$valid_serial&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;false)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Поскольку конфиг генерируется из Ansible, то шаблон
вышел простой, и для каждого из серийников генерируется
нужная строчка с if. Так оно и работала при тестовом списке в
3-5 серийников, но приближалось время, когда список должен
был вырасти до 100+, а затем и до 1000+...&lt;/p&gt;
&lt;p&gt;Поэтому была проведена изыскательская работа, которая привела
меня к &lt;a href="http://wiki.nginx.org/HttpLuaModule"&gt;модулю Lua для Nginx&lt;/a&gt;.
Выяснилось, что на нем реализуют весьма сложную логику при приличных
нагрузках, о чем есть куча статей, даже на Хабре есть вполне годная
&lt;a href="http://habrahabr.ru/company/2gis/blog/199504/"&gt;статья&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Так что я быстро пересобрал свой пакет с Nginx с модулем Lua,
и начал ваять, благо логика у моем случае простейшая:&lt;/p&gt;
&lt;p&gt;1) Загружаем при старте Nginx из файлика с серийниками их список в ngx.shared.DICT&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;lua_shared_dict&lt;/span&gt; &lt;span class="s"&gt;serials&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;init_by_lua&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;io.open(&amp;quot;/etc/nginx/access.list&amp;quot;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;serials&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ngx.shared.serials&lt;/span&gt;
&lt;span class="s"&gt;if&lt;/span&gt; &lt;span class="s"&gt;file&lt;/span&gt; &lt;span class="s"&gt;then&lt;/span&gt;
  &lt;span class="s"&gt;for&lt;/span&gt; &lt;span class="s"&gt;line&lt;/span&gt; &lt;span class="s"&gt;in&lt;/span&gt; &lt;span class="s"&gt;file:lines()&lt;/span&gt; &lt;span class="s"&gt;do&lt;/span&gt;
    &lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;stripped_line&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;line:match(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^%s*(.-)%s*&lt;/span&gt;&lt;span class="nv"&gt;$&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;succ,&lt;/span&gt; &lt;span class="s"&gt;err,&lt;/span&gt; &lt;span class="s"&gt;forcible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;serials:safe_set(&lt;/span&gt; &lt;span class="s"&gt;stripped_line,&lt;/span&gt; &lt;span class="s"&gt;true)&lt;/span&gt;
    &lt;span class="s"&gt;if&lt;/span&gt; &lt;span class="s"&gt;not&lt;/span&gt; &lt;span class="s"&gt;succ&lt;/span&gt; &lt;span class="s"&gt;then&lt;/span&gt;
        &lt;span class="s"&gt;ngx.log(ngx.ERR,&amp;quot;error&lt;/span&gt; &lt;span class="s"&gt;populating&lt;/span&gt; &lt;span class="s"&gt;serials&lt;/span&gt; &lt;span class="s"&gt;list:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;..&lt;/span&gt; &lt;span class="s"&gt;err)&lt;/span&gt;
    &lt;span class="s"&gt;end&lt;/span&gt;
  &lt;span class="s"&gt;end&lt;/span&gt;
  &lt;span class="s"&gt;file:close()&lt;/span&gt;
&lt;span class="s"&gt;else&lt;/span&gt;
    &lt;span class="s"&gt;ngx.log(ngx.ERR,&amp;quot;access.list&lt;/span&gt; &lt;span class="s"&gt;file&lt;/span&gt; &lt;span class="s"&gt;not&lt;/span&gt; &lt;span class="s"&gt;found&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;end&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) При запросе к защищенному контенту проверяем, есть ли такой серийник в списке.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kn"&gt;access_by_lua&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;serial&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ngx.var.ssl_client_serial&lt;/span&gt;
  &lt;span class="s"&gt;local&lt;/span&gt; &lt;span class="s"&gt;value,&lt;/span&gt; &lt;span class="s"&gt;flags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ngx.shared.serials:get(serial)&lt;/span&gt;
  &lt;span class="s"&gt;if&lt;/span&gt; &lt;span class="s"&gt;not&lt;/span&gt; &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="s"&gt;then&lt;/span&gt;
    &lt;span class="s"&gt;ngx.log(ngx.WARN,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blocked&lt;/span&gt; &lt;span class="s"&gt;client&lt;/span&gt; &lt;span class="s"&gt;cert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;..&lt;/span&gt; &lt;span class="s"&gt;serial)&lt;/span&gt;
    &lt;span class="s"&gt;ngx.exit(ngx.HTTP_FORBIDDEN)&lt;/span&gt;
  &lt;span class="s"&gt;end&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://upstream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Весь Lua-код выполняется в отдельных корутинах-песочницах, так что на работу
в Nginx в целом не влияет.
И что особенно хорошо, можно будет в дальнейшем список вынести в базу данных,
к примеру.&lt;/p&gt;
&lt;p&gt;В общем, я был и без того очень впечатлен
возможностями Nginx, а с модулем Lua он еще круче.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 08 Nov 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-11-08:it/Расширяем-возможности-nginx-с-помощью-lua/</guid><category>Nginx</category><category>Lua</category></item><item><title>Auto-backup конфигов активки через Rancid</title><link>http://bulimov.ru/it/auto-backup-%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D0%BE%D0%B2-%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BA%D0%B8-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-rancid/</link><description>&lt;p&gt;На днях помогал коллеге с настройкой автоматического бекапа
для конфигураций нашей активки (Cisco, Juniper), и нашел
весьма интересное решение (похоже, вообще единственное) -
&lt;a href="http://www.shrubbery.net/rancid/"&gt;rancid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Точнее, его форк &lt;a href="https://github.com/dotwaffle/rancid-git"&gt;rancid-git&lt;/a&gt;,
поскольку использую везде и всюду git, и ради бекапов городить CVS или
Subversion было бы неудобно.&lt;/p&gt;
&lt;p&gt;Конечно, rancid этот - весьма оригинальный пример того, как с помощью
expect и bash-скриптов соорудить исправно работающее решение, отлично выполняющее
свою задачу. Если вкратце - оно по крону ходит через telnet/ssh по указанным хостам,
и с помощью expect запрашивает с них информацию + конфиги, а потом вывод кладет
в CVS/subversion/git. В итоге - получаем полную историю изменений конфигурации
и состоянии указанных устройств, в моем случае - в git. Причем rancid-git
умеет работать с удаленным репозиторием, при этом каждый коммит сопровождается push.&lt;/p&gt;
&lt;p&gt;Я не буду тут приводить туториал а-ля Хабрахабр с пунктами типа git clone &amp;amp;&amp;amp; make,
в репозитории rancid-git есть прекрасный readme, в котором по пунктам указано, как
собрать deb-пакет, а также что и для чего конфигурить.
Я просто порекомендую этот инструмент всем, кому хочется версионировать конфиги активки в автоматическом режиме.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 01 Nov 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-11-01:it/auto-backup-конфигов-активки-через-rancid/</guid><category>Rancid</category><category>Cisco</category><category>Juniper</category></item><item><title>Включил комментарии</title><link>http://bulimov.ru/it/%D0%92%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D0%BB-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%80%D0%B8%D0%B8/</link><description>&lt;p&gt;Включил комментирование через Disqus, может кто-то
что-нибудь дельное напишет в комментариях.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 18 Oct 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-10-18:it/Включил-комментарии/</guid><category>Жизнь</category><category>Ruhoh</category></item><item><title>Сдал экзамен на RHCE</title><link>http://bulimov.ru/it/%D0%A1%D0%B4%D0%B0%D0%BB-%D1%8D%D0%BA%D0%B7%D0%B0%D0%BC%D0%B5%D0%BD-%D0%BD%D0%B0-rhce/</link><description>&lt;p&gt;Наконец-то пришел результат экзамена, который сдавал в пятницу. 273 из 300 возможных при проходном балле в 210. Это, конечно,
неприятно - ждать все выходные результата. На RHCSA результат пришел в ту же пятницу около 8 вечера.&lt;/p&gt;
&lt;p&gt;По самому курсу "Системное Администрирование" и экзамену: читал у меня все три части курса Илья Соболев.
Курс весьма хорошо продуман и сбалансирован, ну и читает его Соболев отлично. С позиции человека,
который до этих курсов уже 3 года занимался администрированием Linux-серверов (правда, не RHEL, а Debian),
могу сказать, что хорошая подача материала позволяет осмыслить многие вещи, которыми пользуешься регулярно,
но разобраться в сущности которых вечно некогда. Да и вообще мозги прочищаются.&lt;/p&gt;
&lt;p&gt;Еще в плюсах могу отметить, что охвачены темы, которыми многие пренебрегают из-за больших временных затрат на их
освоение, типа LVM или SELinux. Лично мне было интересно познакомиться с RHEL-специфичными вещами вроде сборки RPM-пакетов,
развертывания репозитория с ними, или kickstart.&lt;/p&gt;
&lt;p&gt;В общем, хорошие, годные курсы по Linux, практически без акцента на конкретный дистрибутив.
И экзамены (и RHCSA, и RHCE) весьма хороши, задания осмысленные, времени дано как раз, чтобы не расслабляться.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Mon, 14 Oct 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-10-14:it/Сдал-экзамен-на-rhce/</guid><category>Жизнь</category></item><item><title>О животных и NetworkManager</title><link>http://bulimov.ru/it/%D0%9E-%D0%B6%D0%B8%D0%B2%D0%BE%D1%82%D0%BD%D1%8B%D1%85-%D0%B8-networkmanager/</link><description>&lt;p&gt;В комментариях к &lt;a href="http://www.opennet.ru/opennews/art.shtml?num=38016"&gt; интервью с Алексеем Кузнецовым &lt;/a&gt;
прочитал прекрасное:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NetworkManager плохой, а какая альтернатива?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ip addr add 12.34.56.78/24 dev eth0
ip ro add default via 12.34.56.1&lt;/p&gt;
&lt;p&gt;Если кому-то нужен какой-то гуй для этого - то он просто животное™.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 02 Oct 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-10-02:it/О-животных-и-networkmanager/</guid><category>Жизнь</category></item><item><title>Вернулся из отпуска</title><link>http://bulimov.ru/it/%D0%92%D0%B5%D1%80%D0%BD%D1%83%D0%BB%D1%81%D1%8F-%D0%B8%D0%B7-%D0%BE%D1%82%D0%BF%D1%83%D1%81%D0%BA%D0%B0/</link><description>&lt;p&gt;Вернулись с женой из отпуска, который провели в Индонезии.
Из IT-наблюдений: во всех отелях и кафе на Бали, Гили и Ломбоке
встречались мне только и исключительно железки Mikrotik в роли HotSpot.
Забавно видеть Linux-based решения от Латвийских разработчиков
в далекой Индонезии.
На ПК служащих - только Windows XP, никаких Вист и Семерок-восьмерок.&lt;/p&gt;
&lt;p&gt;Ну и самое ужасное - аэропорт города Денпасар, который на Бали - практически не
компьютеризирован. На посадочных талонах номер рейса и номер места пишут от руки, проверка
посадки осуществляется с использованием листка бумаги и ручки.
Правда, рядом почти достроили новый терминал, мы туда прогулялись - там уже все нормально и современно.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Tue, 01 Oct 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-10-01:it/Вернулся-из-отпуска/</guid><category>Жизнь</category><category>MikroTik</category></item><item><title>Как я управляю серверами</title><link>http://bulimov.ru/it/%D0%9A%D0%B0%D0%BA-%D1%8F-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D1%8F%D1%8E-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0%D0%BC%D0%B8/</link><description>&lt;p&gt;Решил вот описать принципы управления серверами, к которым пришел за эти 3 года.&lt;/p&gt;
&lt;p&gt;Итак:&lt;/p&gt;
&lt;h3&gt;принцип №1&lt;/h3&gt;
&lt;p&gt;Все конфиги лежат в &lt;a href="http://en.wikipedia.org/wiki/Revision_control"&gt;VCS&lt;/a&gt;, я сейчас использую Git.
Я думаю, в комментариях принцип не нуждается, необходимость централизованного
хранения конфигов, а также хранения истории изменений с возможностью отката обсуждалась не раз.&lt;/p&gt;
&lt;h3&gt;принцип №2&lt;/h3&gt;
&lt;p&gt;Все ПО ставится только из пакетов, никаких ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install.
Если пакета нужной версии нет в репозиториях дистрибутива - ищем готовый пакет, желательно
от разработчиков, или от солидного стороннего репозитория типа &lt;a href="http://www.dotdeb.org/"&gt;dotdeb&lt;/a&gt;. Если пакета для ПО нет - собираем пакет сами,
причем процесс сборки документируется, а все нужное для сборки кладется в VCS.
Все сторонние пакеты собираются в свой репозиторий, в котором как минимум есть разделение на stable и testing.
Все пакеты из testing, после проверки на стейджинге, перемещаются в stable.
Таким образом, мы контролируем установленное ПО средствами дистрибутива, что сильно упрощает жизнь сисадмина.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Уже руководствуясь этими двумя принципами, мы можем без лишних усилий развернуть точную копию нужного окружения
(production или staging), повторяемость которого нам гарантированна.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Но для того, чтобы разворачивать все быстро, и не полагаться на свою память, есть&lt;/p&gt;
&lt;h3&gt;принцип №3&lt;/h3&gt;
&lt;p&gt;Последовательность действия для развертывания каждого компонента системы документируется.
Если не используется система управления конфигурациями - документируется в виде последовательности
команд с комментариями. Сейчас я использую &lt;a href="http://www.ansibleworks.com/"&gt;Ansible&lt;/a&gt;, и в этом случае сами taskи и playbookи Ansible
являются отличной документацией. В случае использования &lt;a href="http://www.opscode.com/chef/"&gt;Chef&lt;/a&gt;, грамотно написанные рецепты также
сами по себе являются документацией.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Теперь мы можем разворачивать нужное окружение в автоматическом режиме.
А еще, можно тестировать работоспособность всей системы в целом, используя любую
из систем Continuous Integration, задав задание разворачивать окружение целиком, с нуля,
в автоматически создаваемых для этого виртуалках.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Теперь, для полного спокойствия в случае падения метеорита на наш production, нам нужен&lt;/p&gt;
&lt;h3&gt;принцип №4&lt;/h3&gt;
&lt;p&gt;Для всех данных надо выполнять резервное копирование. Причем нужна и репликация (для failover), и создание резервной копии,
причем с возможностью отката назад по времени, и создание offsite-копии на случай форс-мажора.
Я неоднократно выслушивал мнение, что репликация базы данных отлично заменяет
резервное копирование. На такое заявление я отвечаю предложением подумать, что будет с репликой в случае
выполнение на master-сервере команды удаления либо изменения наших данных из-за программной ошибки, либо из-за
действий злоумышленника.&lt;/p&gt;
&lt;h3&gt;принцип №4а&lt;/h3&gt;
&lt;p&gt;Резервные копии надо тестировать!
Я даже вынес этот тезис в отдельный пункт, поскольку именно про него обычно и забывают,
и оказываются в итоге с неработоспособным бекапом.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Выполняя эти 4 принципа, мы можем быть уверены, что даже в случае падения метеорита на наш production,
мы сможем его восстановить без нервов, и в разумные минимальные сроки.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;А чтобы не порушить случайно чего-нибудь, есть&lt;/p&gt;
&lt;h3&gt;принцип №5&lt;/h3&gt;
&lt;p&gt;Руками на production ничего делаться не должно. Все действия выполняются только с помощью системы управления конфигурациями
(Chef, Ansible, Puppet и т.п.), причем обязательно тестируются на staging-серверах. Это дает нам уверенность в том, что
мы не опечатаемся, набирая в команду в 25й раз, и вообще спасает от повторения одних и тех же действий на каждом сервере.
А еще это дает нам окружение, в котором все сервера находятся в одинаковом, известном заранее состоянии, все
компоненты для получения которого у нас есть в VCS.&lt;/p&gt;
&lt;h3&gt;принцип  №6&lt;/h3&gt;
&lt;p&gt;Если что-то не мониторится, то этого не существует. Если мы не осуществляем мониторинг какого-либо сервиса,
то мы не можем быть никогда уверены, что этот сервис в данный момент времени вообще функционирует.
Поэтому, все важные сервисы должны быть под наблюдением. Как и сам сервис мониторинга.
И, конечно, мониторинг тоже надо тестировать.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Естественно, есть и другие принципы, но это - основа основ, благодаря которой я спокойно сплю по ночам,
и уверен, что любое обновление на боевых серверах пройдет гладко, а даже если и нет - всегда
можно откатиться к предыдущему, работоспособному состоянию.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 05 Sep 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-09-05:it/Как-я-управляю-серверами/</guid><category>Ansible</category><category>Chef</category></item><item><title>Низкоуровневое обнаружение в Zabbix, ищем диски в контроллере от 3ware</title><link>http://bulimov.ru/it/%D0%9D%D0%B8%D0%B7%D0%BA%D0%BE%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D0%B5%D0%B2%D0%BE%D0%B5-%D0%BE%D0%B1%D0%BD%D0%B0%D1%80%D1%83%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-zabbix-%D0%B8%D1%89%D0%B5%D0%BC-%D0%B4%D0%B8%D1%81%D0%BA%D0%B8-%D0%B2-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B5-%D0%BE%D1%82-3ware/</link><description>&lt;p&gt;Я уже &lt;a href="/it/Низкоуровневое-обнаружение-в-zabbix"&gt; писал &lt;/a&gt; про &lt;a href="https://www.zabbix.com/documentation/ru/2.0/manual/discovery/low_level_discovery"&gt;низкоуровневое обнаружение&lt;/a&gt;
в Zabbix, так что повторять теорию не буду.&lt;/p&gt;
&lt;p&gt;Теперь мне понадобилось автоматом получать список хардов в массивах
на контроллерах 3ware, которыми оборудованы у нас многие сервера.&lt;/p&gt;
&lt;p&gt;Вести руками шаблоны для каждого сервера с иным порядком или количеством дисков
показалось мне плохой идеей, да и авто-обнаружение само напрашивалось.&lt;/p&gt;
&lt;p&gt;Вдохновлялся я утилитой 3ware-status, для работы авто-обнаружения нам потребуется
установленная утилита tw-cli, взять ее для Debian/Ubuntu проще всего &lt;a href="http://hwraid.le-vert.net/"&gt; здесь &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Работает скрипт примерно так:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Получаем общую информацию командой &lt;code&gt;tw-cli info&lt;/code&gt;, вычленяем оттуда список
   контроллеров простенькой регуляркой &lt;code&gt;^c[0-9]+$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Получаем информацию для каждого контроллера &lt;code&gt;tw-cli %controller info&lt;/code&gt;, опять-таки
   регуляркой &lt;code&gt;^[p][0-9]+$&lt;/code&gt; вытаскиваем оттуда список хардов&lt;/li&gt;
&lt;li&gt;Отдаем полученный список в формате JSON&lt;/li&gt;
&lt;li&gt;Используем полученные данные в шаблонах заббикса, в разделе &lt;em&gt;обнаружение&lt;/em&gt;,
   чтобы вытащить статусы каждого диска в массиве с помощью 3ware-status или tw-cli&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;На выходе должны получить что-то вроде этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#3WARE_DISK}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c0u0p0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#3WARE_DISK}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c0p0u1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#3WARE_DISK}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c0p1u2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#3WARE_DISK}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c0p1u3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Реализовано все на Python, благо он есть по-умолчанию практически в любом дистрибутиве.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3ware_discovery.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;binary_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/sbin/tw-cli&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# returns (rc, stdout, stderr) from shell command&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_controllers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;controllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;splitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^c[0-9]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_disks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;disks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;splitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^[p][0-9]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="c"&gt;# &amp;#39;-&amp;#39; means the drive doesn&amp;#39;t belong to any array&lt;/span&gt;
                &lt;span class="c"&gt;# If is NOT PRESENT too, it just means this is an empty port&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;NOT-PRESENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;disks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;#39;{#3WARE_DISK}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;splitted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;disks&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;disks_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; info&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;binary_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tw-cli command failed with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;controllers_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_controllers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;controllers_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; info &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tw-cli command failed with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;disks_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_disks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;disks_list&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ну и конечно нужно создать ключ, по которому заббикс будет список дисков получать.&lt;/p&gt;
&lt;p&gt;В конфиге заббикса добавляем строку вида&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UserParameter=3ware.discovery,sudo /opt/3ware_discovery.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В этом случае, нужно беспарольное sudo на эту команду для пользователя zabbix.&lt;/p&gt;
&lt;p&gt;Ну а в самом заббиксе уже создаем в шаблоне обнаружение, в котором используем ключ
3ware.discovery и макрос {#3WARE_DISK}, например 3ware.disk_status[{#3WARE_DISK}].
Подробности - в документации.&lt;/p&gt;
&lt;p&gt;Исходники доступны в моем &lt;a href="https://github.com/abulimov/utils"&gt;репозитории&lt;/a&gt;, в папке &lt;em&gt;zabbix/data_collectors&lt;/em&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 14 Aug 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-08-14:it/Низкоуровневое-обнаружение-в-zabbix-ищем-диски-в-контроллере-от-3ware/</guid><category>Zabbix</category><category>Python</category><category>Monitoring</category></item><item><title>О любви к программированию</title><link>http://bulimov.ru/it/%D0%9E-%D0%BB%D1%8E%D0%B1%D0%B2%D0%B8-%D0%BA-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E/</link><description>&lt;p&gt;Хоть я и выбрал своей профессией системное администрирование,
программирование я люблю. Даже очень люблю.&lt;/p&gt;
&lt;p&gt;Вот решил написать историю моего знакомства с программированием.&lt;/p&gt;
&lt;h3&gt;Школа&lt;/h3&gt;
&lt;p&gt;Началось все в школе. Одноклассник ходил на курсы программирования,
готовясь поступать в какой-то технический вуз, и рассказывал про Delphi.
Рассказы его так меня увлекли, что я даже сподобился установить этот самый Delphi,
и даже создал какую-то форму, скопировав код из примеров, присланных одноклассником.
По итогу этих действий, у меня сложилось впечатление,
что программирование - это точно не для меня. Я настолько разуверился в своих силах
после попыток разобраться самостоятельно в Delphi, что до поступления в ВУЗ даже
не пытался больше лезть в программирование.&lt;/p&gt;
&lt;h3&gt;Первый-второй курсы, Borland Pascal&lt;/h3&gt;
&lt;p&gt;Все изменилось на первом курсе специальности "Прикладная математика", которую я
наивно выбрал при поступлении в ВУЗ. Нас учили азам программирования в Turbo Pascal.
Как-то само получилось, что к концу первого курса я делал лабораторные работы друзьям
и однокурсникам. На втором курсе тенденция сохранилась.&lt;/p&gt;
&lt;h3&gt;Третий курс, Plain C&lt;/h3&gt;
&lt;p&gt;Программирования давалось мне все легче, когда
на третьем курсе у нас начался курс "Архитектура ЭВМ и системное программное обеспечение",
читал который &lt;a href="http://www.stolyarov.info/"&gt;Андрей Викторович Столяров&lt;/a&gt;. Читал он его
крайне хорошо, да и пособия за его авторством весьма хороши. А еще он отличался пренебрежением к
проприетарным технологиям, отказом от Windows, и крайне экспрессивной манерой преподавания.
Именно он зародил во мне зерно интереса к Unix и Linux, хотя на тот момент его отказ от
Windows и любовь к свободному ПО казались мне чудачеством. Сама мысль о том, что кто-то
использует бесплатный и свободный Linux всерьез - казалась смешной, ведь окружал
студентов сплошной Windows. Только на лабораторных работах мы увидели впервые Linux,
и пытались писать код на Plain C. Ради выполнения лабораторных работ я и поставил тогда впервые Linux.
Это был дистрибутив Mandariva 2007. Но речь сейчас не о Linux, а о программировании.&lt;/p&gt;
&lt;p&gt;Итак, нас учили писать на чистом C под Linux. Преподаватель оглушительно орал на людей, некорректно
форматирующих свой код, и отказывался принимать у них лабораторные работы. Именно он приучил меня
всегда форматировать код. Сами задания были весьма интересными,
мы реализовывали списки/стеки, учась в процессе работать с указателями, динамическим выделением памяти, и компилятором gcc.
Вершиной этих заданий было написание сервера-чата с использованием сокетов, для общения с помощью
telnet, либо собственноручно написанного клиента.&lt;/p&gt;
&lt;h3&gt;Четвертый-пятый курсы, C++, Delphi, PHP, SQL&lt;/h3&gt;
&lt;p&gt;После обучения C, а вместе с ним и основам "взрослого" программирования, нас начали учить
основам ООП, на базе C++, но без STL. Это было просто потрясающе - абстракции, повторное
использование кода, инкапсуляция. Мы реализовывали самостоятельно динамические структуры данных (одно- и дву-связные
списки, векторы, деревья, стеки и очереди), используя шаблоны. Задания мы сдавали через Google Code - так
нас пытались научить использовать системы контроля версий. Параллельно я "фрилансил" - выполнял
задания за однокурсников, а также за студентов параллельно специальности "ЭВМ". У них задания были из компьютерной графики,
на Borland С++, под DOS. Требовалось реализовывать общеизвестные алгоритмы закраски/затенения/отсечения, и с их помощью рисовать
фигуры в трехмерном пространстве, для чего мной был написан свой "движок",
позволявший мне отрисовывать любые фигуры, задавая их в виде координат углов полигонов и нормалей к ним.
Это было интересно и весьма познавательно, обучало не только алгоритмам и структурам данных, но и подходам к разработке.&lt;/p&gt;
&lt;p&gt;Ну а потом началось знакомство с PHP+MySQL, реализация чего-то вроде справочной системы/магазина,
и после C/C++ это было совсем уныло... Я до сих пор воспринимаю PHP только как скриптовый язык для Web,
с ужасом наблюдая все старания прикрутить к нему ООП.&lt;/p&gt;
&lt;p&gt;Конечно, приходилось писать и на VBA, и на Delphi, но никакого нового опыта это мне не давало.&lt;/p&gt;
&lt;h3&gt;После обучения&lt;/h3&gt;
&lt;p&gt;Я получал массу удовольствия от программирования в университете, но мой "студенческий фриланс" дал мне
возможность понять, что каждодневное напряженное занятие программированием дается мне весьма тяжело.
Наличие в потоке еще нескольких программистов, не только мне не уступавших, но и превосходивших меня, явно указывало мне,
что великим программистом мне не стать, и именно это осознание подтолкнуло меня к тому, чтобы принять предложение от друга
пойти работать на пятом курсе "сисадмином-эникеем".&lt;/p&gt;
&lt;p&gt;Став сисадмином, я не забросил увлечение программированием, и продолжил писать код и изучать новые языки.&lt;/p&gt;
&lt;h3&gt;Знакомство с Ruby через Chef&lt;/h3&gt;
&lt;p&gt;Развиваясь как сисадмин, я пришел к использованию систем управления конфигурациями. Начав работу с Chef,
я параллельно стал изучать и Ruby, на котором Chef написан. Конечно, после C и C++ обилие синтаксического сахара
и скорость разработки вскружили мне голову, однако довольно скоро я прочувствовал и все минусы динамической типизации.
Заодно во мне нарастало недовольство ООП, которое через год вылилось в изучение Haskell.
Но сам язык Ruby мне понравился, и потому я его с удовольствием &lt;a href="/it/Плагин-к-ruhoh-для-рисования-графиков"&gt;использую&lt;/a&gt; и сейчас.&lt;/p&gt;
&lt;h3&gt;Haskell и функциональное программирование&lt;/h3&gt;
&lt;p&gt;Намучившись с изменяемым состоянием объектов, я обратился к чистому функциональному языку Haskell.
Начав его изучение с чудесной книги &lt;a href="http://learnyouahaskell.com/"&gt;Learn you a Haskell for Great Good&lt;/a&gt;,
я довольно быстро осознал достоинства функционального подхода к написанию программ. Хоть я и не смог
найти применения Хаскелю в реальной жизни (а точнее, для меня оказалось слишком сложно держать в голове
столь большой и сложный язык, при том, что я не программист, и программирую далеко не каждый день),
я стараюсь использовать основные принципы функционального подхода при разработке на других языках программирования.&lt;/p&gt;
&lt;h3&gt;Python и Ansible&lt;/h3&gt;
&lt;p&gt;&lt;a href="/it/Мнение-о-chef"&gt;Наевшись&lt;/a&gt; Chef-ом, я начал использовать Ansible, и, конечно, мне понадобилось писать свои модули.
Поскольку нативные модули, которые могут принять в апстрим, для Ansible можно писать только на Python, пришлось
использовать его. К счастью, Python крайне легко читается, и мой опыт с Ruby не прошел впустую, так что начать
писать модули для Ansible оказалось очень просто. Ну а осознав преимущества Питона (он есть в каждом дистрибутиве по-умолчанию,
очень легко читается и пишется), я начал использовать его как второй язык для написания различных полезных утилит.
Первым языком для этого все равно остается Shell, но для более сложных вещей я использую Python.&lt;/p&gt;
&lt;h3&gt;Заключение&lt;/h3&gt;
&lt;p&gt;Итак, сейчас в моей копилке целая охапка языков, из которых использую я в основном Shell и Python. Такой выбор, конечно же,
во многом определен особенностями работы системного администратора, но выбор языка все равно остается за мной.
Что самое приятное - программирование осталось моим хобби, и я получаю от него огромное удовольствие.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 25 Jul 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-07-25:it/О-любви-к-программированию/</guid><category>Программирование</category><category>Жизнь</category></item><item><title>Monitoring sucks!</title><link>http://bulimov.ru/it/monitoring-sucks/</link><description>&lt;p&gt;&lt;strong&gt;TL;DR - тут я Sensu критиковал, но в 2014 году успешно заменил Zabbix на Sensu версии 0.12+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;В 2012 году появился в среде devops такой хештег, #monitoringsucks.
В сообщения с этим тегом devopsы писали, что текущее положение дел
в сфере мониторинга их не устраивает. Что именно - прекрасно иллюстрирует
&lt;a href="https://speakerdeck.com/obfuscurity/the-state-of-open-source-monitoring"&gt;эта презентация&lt;/a&gt;
Если вкратце - хочется людям некоего стандарта API для взаимодействия между компонентами
утилит мониторинга, ну и появления самих этих компонент, чтоб из них строить
гибкий и умный мониторинг.&lt;/p&gt;
&lt;p&gt;Итогом этой волны недовольства стали массовые обсуждения проблем
и привлечение внимания к интересным утилитам типа &lt;a href="http://sensuapp.org/"&gt;Sensu&lt;/a&gt;
и &lt;a href="http://riemann.io/"&gt;Riemann&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В 2013 году хештег в сообществе сменился - теперь это #monitoringlove.
Произошло это благодаря развитию opensource-утилит для мониторинга.
Глядя на всеобщее воодушевление, я решил в рамках эксперимента
отринуть верой и правдой служивший мне 2 года &lt;a href="http://www.zabbix.com"&gt;Zabbix&lt;/a&gt;,
и попробовать в тех же задачах использовать Sensu.
Riemann я не стал всерьез рассматривать, поскольку на данный момент
у него нет никаких средств для обеспечения отказоустойчивости, да и
сама идея писать конфиг на каком-либо языке программирования (а уж тем более
на Clojure) порочна.&lt;/p&gt;
&lt;p&gt;Я сравнил на одних и тех же задачах Sensu и Zabbix.
Задачи простые - мониторинг всего стека приложения для современного веб-сайта,
т.е. Nginx+Unicorn, Riak, Redis, RabbitMQ, Postgres, и сами сервера.
Конечно, все эксперименты я делал на виртуалках, имитирующих реальную площадку.&lt;/p&gt;
&lt;h4&gt;Вот минусы и плюсы Sensu версии 0.9 в сравнении с Zabbix версии 2.0.6:&lt;/h4&gt;
&lt;h3&gt;Минусы Sensu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Нет зависимостей между событиями. (UPD 2014 - уже есть).
    Это безусловно главный минус, и как его будут исправлять - неясно.&lt;/li&gt;
&lt;li&gt;Уведомления куцые по настройкам.
    Это второй по важности минус. Я пробовал его обойти с помощью
    &lt;a href="https://github.com/flpjck/flapjack"&gt;Flapjack&lt;/a&gt;,
    но поскольку сам Flapjack еще не умеет (хоть и заявляют в целях)
    зависимости между событиями - то толку с него мало.&lt;/li&gt;
&lt;li&gt;Конфиг в json, а не в yaml. (для себя решил генерацией конфига из Ansible).&lt;/li&gt;
&lt;li&gt;Вся логика содержится в проверочных скриптах.
    (UPD 2014 - сейчас мне это кажется даже плюсом)&lt;/li&gt;
&lt;li&gt;Нужен внешний хранитель метрик, он же рисователь графиков.
    (UPD 2014 - после графиков Zabbixа, графики Graphite это просто супер)&lt;/li&gt;
&lt;li&gt;Куцая документация.
    (UPD 2014 - документация стала сильно лучше)
    Хоть и обещают они, что все документировано, но, к примеру, на момент написания
    этой заметки, документации по созданию фильтров нет вообще.
    К счастью, проект простой, можно разобраться, просто читая код.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Плюсы Sensu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Конфиг можно хранить в git.&lt;/li&gt;
&lt;li&gt;Масштабируемость.&lt;/li&gt;
&lt;li&gt;Отказоустойчивость.&lt;/li&gt;
&lt;li&gt;Гибкость выбора системы хранения данных.&lt;/li&gt;
&lt;li&gt;Поддержка плагинов nagios.&lt;/li&gt;
&lt;li&gt;Авто-подключение клиентов.&lt;/li&gt;
&lt;li&gt;Механизм подписок.&lt;/li&gt;
&lt;li&gt;Данные публикуются клиентами по мере генерации.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Минусы zabbix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Настройка через веб-морду.
    Это ужасно, когда я не могу в деплой площадки внести и деплой.
    мониторинга целиком, вместе с конфигом..&lt;/li&gt;
&lt;li&gt;Конфиги нельзя хранить в git.&lt;/li&gt;
&lt;li&gt;Масштабируемость только с помощью proxy.&lt;/li&gt;
&lt;li&gt;Ресурсоемкость.&lt;/li&gt;
&lt;li&gt;Данные забираются раз в n минут сервером.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Плюсы zabbix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Зависимости, сложные условия.&lt;/li&gt;
&lt;li&gt;Внешние скрипты для уведомлений.&lt;/li&gt;
&lt;li&gt;UserParameter, которые позволяют проверять что угодно..&lt;/li&gt;
&lt;li&gt;Авто-обнаружение.&lt;/li&gt;
&lt;li&gt;Низкоуровневое обнаружение.&lt;/li&gt;
&lt;li&gt;Большое сообщество, много шаблонов и пользовательских данных.&lt;/li&gt;
&lt;li&gt;Мощная веб-админка.&lt;/li&gt;
&lt;li&gt;Встроенные обработки данных.&lt;/li&gt;
&lt;li&gt;Встроенные графики.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;По итогу эксперимента могу сказать, что, на мой взгляд, жить c Sensu можно, но затрачивать человекочасы на
доведение мониторинга до ума нужно в огромных объемах, побольше чем в Nagios.
И уж точно еще рано говорить о замене того же Zabbix или Zenoss на что-то модульное
на базе какого-нибудь Sensu+Graphite+Flapjack.&lt;/p&gt;
&lt;p&gt;Лично я остаюсь на Zabbix, несмотря на все его недостатки.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPD 2014 - я успешно заменил Zabbix на Sensu версии 0.12+ и Graphite&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Thu, 12 Jun 2014 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-07-10:it/monitoring-sucks/</guid><category>Zabbix</category><category>Sensu</category><category>Monitoring</category><category>Мнение</category></item><item><title>Низкоуровневое обнаружение в Zabbix</title><link>http://bulimov.ru/it/%D0%9D%D0%B8%D0%B7%D0%BA%D0%BE%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D0%B5%D0%B2%D0%BE%D0%B5-%D0%BE%D0%B1%D0%BD%D0%B0%D1%80%D1%83%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-zabbix/</link><description>&lt;p&gt;В используемой мной системе мониторинга Zabbix, начиная с версии 2.0,
появилась такая любопытная штука, как &lt;a href="https://www.zabbix.com/documentation/ru/2.0/manual/discovery/low_level_discovery"&gt;низкоуровневое обнаружение&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Я не буду пересказывать содержимое документации, расскажу лучше о том, как я писал свой тип
обнаружения для мониторинга очередей RabbitMQ.&lt;/p&gt;
&lt;p&gt;Проблема в том, что очередей в RabbitMQ может быть много, и, по мере развития веб-проекта,
они меняются. Так что я решил обнаруживать их автоматически, и написал для этого свой провайдер
данных для обнаружения заббикса.&lt;/p&gt;
&lt;p&gt;Порядок действий прост:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Получаем список vhostов командой &lt;code&gt;rabbitmqctl -q list_vhosts name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Получаем для каждого vhost список очередей командой &lt;code&gt;rabbitmqctl -q list_queues -p %vhost name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Отдаем полученные пары vhost:queue в формате JSON&lt;/li&gt;
&lt;li&gt;Используем полученные данные в шаблонах заббикса, в разделе &lt;em&gt;обнаружение&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;PROFIT!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;На выходе должны получить что-то вроде этого:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#RABBITMQ_VHOST_NAME}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;{#RABBITMQ_QUEUE_NAME}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;{#RABBITMQ_VHOST_NAME}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;{#RABBITMQ_QUEUE_NAME}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Реализовано все на Python, код предельно прост, в комментариях не нуждается.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rabbitmq_discovery.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# returns (rc, stdout, stderr) from shell command&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_vhosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;vhosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;vhosts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vhosts&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vhost&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;{#RABBITMQ_VHOST_NAME}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vhost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;{#RABBITMQ_QUEUE_NAME}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rabbitmqctl -q list_vhosts name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rabbitmqctl command failed with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;vhosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_vhosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;raw_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;vhost_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vhosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rabbitmqctl -q list_queues -p &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;vhost_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rabbitmqctl command failed with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;raw_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_stats&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parse_stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vhost_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;raw_stats&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Еще нужно создать ключ, по которому заббикс будет всю эту красоту получать.&lt;/p&gt;
&lt;p&gt;В конфиге заббикса добавляем что-либо вида&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UserParameter=rabbitmq.discovery,sudo /opt/rabbitmq_discovery.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В моем случае, нужно беспарольное sudo на эту команду для пользователя zabbix.&lt;/p&gt;
&lt;p&gt;Ну а в самом заббиксе уже создаем в шаблоне обнаружение, в котором используем ключ
rabbitmq.discovery и макросы {#RABBITMQ_VHOST_NAME} и {#RABBITMQ_QUEUE_NAME}.
Это подробно описано в документации,
так что я этого описывать не буду.&lt;/p&gt;
&lt;p&gt;Исходники доступны в моем &lt;a href="https://github.com/abulimov/utils"&gt;репозитории&lt;/a&gt;, в папке &lt;em&gt;zabbix/data_collectors&lt;/em&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 26 Jun 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-06-26:it/Низкоуровневое-обнаружение-в-zabbix/</guid><category>Zabbix</category><category>Python</category><category>Monitoring</category></item><item><title>Плагин к Ruhoh для рисования графиков</title><link>http://bulimov.ru/it/%D0%9F%D0%BB%D0%B0%D0%B3%D0%B8%D0%BD-%D0%BA-ruhoh-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B8%D1%81%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA%D0%BE%D0%B2/</link><description>&lt;p&gt;Еще планируя создание статического блога на Hakyll я хотел реализовать рисование
графиков "на лету" из отдельно хранящихся данных. Но с Hakyll не сложилось,
и после долгих поисков я остановился на &lt;a href="http://ruhoh.com/"&gt;Ruhoh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Все нижеописанное относится к &lt;strong&gt;Ruhoh 2.1&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Цель&lt;/h3&gt;
&lt;p&gt;Рисовать графики из данных, хранящихся в человеко-читаемом виде.
Нужно мне это было для визуализации своих спортивных тренировок.&lt;/p&gt;
&lt;h3&gt;Решение&lt;/h3&gt;
&lt;p&gt;Конечно, я решил оформить все в виде плагина к Ruhoh, благо возможность такая есть,
да и программировать я люблю. Язык разработки Ruby, поскольку сам Ruhoh написан на Ruby.&lt;/p&gt;
&lt;p&gt;Документация конечно не блещет, так что пришлось покопаться в исходном коде Ruhoh.&lt;/p&gt;
&lt;p&gt;В результате появился плагин, берущий данные из yaml-файлов, и стоящий по ним графики
с помощью &lt;a href="http://rubygems.org/gems/gruff"&gt;gruff&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Плагин состоит из 3х файлов:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;collection.rb&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Ruhoh::Resources::Graphs&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Collectable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_endpoint&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;/assets/graphs&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Тут мы кроме url_endpoint ничего особо и не описываeм. Url_endpoint нужен для указания,
где будут в итоге лежать получившиеся графики&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;compiler.rb&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gruff&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ruhoh&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Compiler&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Graphs&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ruhoh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@ruhoh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ruhoh&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#create graph&lt;/span&gt;
        &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
        &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Gruff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unknown&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;theme_pastel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y_axis_increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y_axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y_axis_label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y_axis_label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x_axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x_axis_label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x_axis_label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;labels&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimum_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minimum&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minimum&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
        &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@ruhoh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;graphs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paths?&lt;/span&gt;
          &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Friend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: directory not found - skipping.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Friend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cyan&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: (using gruff and yaml)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;compiled_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_to_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@ruhoh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_endpoint&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="vi"&gt;@ruhoh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compiled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir_p&lt;/span&gt; &lt;span class="n"&gt;compiled_path&lt;/span&gt;
        &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;realpath&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
          &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;compiled_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiled_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

          &lt;span class="c1"&gt;#load yaml&lt;/span&gt;
          &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

          &lt;span class="c1"&gt;#write graph&lt;/span&gt;
          &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiled_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Friend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Тут все уже интереснее. В методе &lt;em&gt;render_graph&lt;/em&gt; описана сама процедура создания графика,
а в методе run мы обходим все файлы &lt;em&gt;коллекции&lt;/em&gt;, и из них генерируем этим самым
методом &lt;em&gt;render_graph&lt;/em&gt; итоговые картинки, и помещаем куда нужно.&lt;/p&gt;
&lt;p&gt;Ну и для того, чтобы в preview-режиме мы тоже могли видеть эти картинки, существует файл&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;previewer.rb&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gruff&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Ruhoh::Resources::Graphs&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Previewer&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ruhoh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@ruhoh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ruhoh&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@ruhoh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;graphs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PATH_INFO&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.yml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;realpath&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Ruhoh&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Compiler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Graphs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#write graph&lt;/span&gt;
        &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileformat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PNG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; not found&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В нем описывается, как по запрошенному URL отдать сгенерированную "на лету" картинку,
используя метод render_graph из compiler.rb.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Fri, 21 Jun 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-06-21:it/Плагин-к-ruhoh-для-рисования-графиков/</guid><category>Программирование</category><category>Ruby</category><category>Ruhoh</category></item><item><title>И снова пользователи</title><link>http://bulimov.ru/it/%D0%98-%D1%81%D0%BD%D0%BE%D0%B2%D0%B0-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D0%B8/</link><description>&lt;p&gt;Я уже довольно давно понял, что не могу и не хочу работать с людьми,
и уже около года поддержкой пользователей не занимаюсь.
Однако сейчас наш офисный сисадмин в отпуске, и я вынужден снова этим заниматься.&lt;/p&gt;
&lt;p&gt;Вот, к примеру, сегодня подошла ко мне тетя с просьбой помочь в отправлении
с МФУ скана на email. Сам я этого никогда не делал, но сложности в этом не видел,
и потому заявил ей, что покажу, как это делается. Однако, в процессе демонстрации
выяснилось, что тете категорически не надо, чтоб я показал ей принцип. Ей нужно было
что я &lt;em&gt;за нее&lt;/em&gt; отсканировал и отправил N листов. Причем на мое удивление она выдала
потрясающую фразу: "Я же женщина, вы что, будете стоять и смотреть, как я сама это делаю?!"
После такого я просто ушел, оставив тетю на попечение сердобольного пользователя, которому
все равно было нечем заняться, и потому он рвался помочь ей. В результате, она села ему на шею,
и он выполнил все за нее, чего она и добивалась.&lt;/p&gt;
&lt;p&gt;Я, конечно, и сам такое не раз наблюдал, и ездили на мне так многие, пока я не набрался опыта.
Я даже читал об этом у Лимончелли. Но каждый раз не устаю удивляться таким приспособленным людям...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Wed, 19 Jun 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-06-19:it/И-снова-пользователи/</guid><category>Юзвери</category></item><item><title>Что я думаю о Debian на серверах</title><link>http://bulimov.ru/it/%D0%A7%D1%82%D0%BE-%D1%8F-%D0%B4%D1%83%D0%BC%D0%B0%D1%8E-%D0%BE-debian-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0%D1%85/</link><description>&lt;p&gt;С 2010 года, когда я только начал заниматься системным администрированием,
я использовал как основной серверный дистрибутив Debian.
Это был изначально осознанный выбор, и на момент написания заметки таковым и остается.
Конечно, я работал и с другими дистрибутивами, и потому мне есть и было с чем сравнить.
По итогам работы с Debian и написана эта заметка.&lt;/p&gt;
&lt;h1&gt;Негатив&lt;/h1&gt;
&lt;h2&gt;Общесистемные лимиты&lt;/h2&gt;
&lt;p&gt;В свое время, встала передо мной задача настройки под высокую нагрузку различных сервисов,
в том числе PostgreSQL + pgbouncer. И конечно мне надо было подтюнить лимит количества
открытых файлов для пользователя postgres, что я и попытался сделать, отредактировав
&lt;strong&gt;/etc/security/limits.conf&lt;/strong&gt;. Но толку с этого не было, cat /proc/$PID/limits показывал
в строке &lt;strong&gt;Max open files&lt;/strong&gt; все то же значение - 1024 файла, хотя ulimit -n от пользователя
postgres показывал корректное значение (после su - postgres)&lt;/p&gt;
&lt;p&gt;Я, был удивлен, и полез разбираться. Для начала - в /etc/pam.d
Там я обнаружил, что отсутствует строчка
&lt;code&gt;session    required   pam_limits.so&lt;/code&gt;
в настройках для новой сессии везде, кроме настроек для su.
Я эту строчку добавил для всех сессий, ради эксперимента.
Но толку не было - сервисы запускались все так же с лимитом 1024.&lt;/p&gt;
&lt;p&gt;Я полез разбираться дальше,и вот что выяснил:
Лимиты применяются с помощью модуля pam_limits, и отлично работают при выполнении через
su - username, однако при инициализации через start-stop-daemon лимиты не выставляются,
поскольку start-stop-daemon не использует pam. Сам start-stop-daemon - это debian-специфичная вещь, представляет собой скрипт для запуска демонов, изначально написанный на Perl, а затем
переписанный на C для ускорения. Что интересно, в RHEL6 и производных тоже используется свой
инструмент для запуска демонов, но у них он основан на su и использует pam.
В 2005 году по этому поводу был предложен &lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=302079"&gt;патч&lt;/a&gt;,
однако его так и не внесли в поставляемую версию start-stop-daemon.
Также предлагались подобные патчи, основанные на инициализации сессии pam, и каждый раз отклонялись.&lt;/p&gt;
&lt;h2&gt;Поломанный update-rc.d start/stop/defaults&lt;/h2&gt;
&lt;p&gt;В &lt;strong&gt;squeeze&lt;/strong&gt; поломали update-rc.d start/stop/defaults, из-за чего не пашет disable service в chef.
В puppet это &lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=573551"&gt;обошли&lt;/a&gt;,
а вот в chef - нет, так что пришлось патчить chef-client.&lt;/p&gt;
&lt;h2&gt;Race condition в скриптах initramfs&lt;/h2&gt;
&lt;p&gt;Крайне милый баг в &lt;strong&gt;squeeze&lt;/strong&gt;, из-за которого держать рут на lvm опасно.
&lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568838"&gt;Патч&lt;/a&gt; предложен в 2010,
до сих пор не включен в апстрим, версия 6.0.7 все так же может не найти lvm тома при загрузке.
У меня, к счастью, проявился только на некотором железе, которое пришло под новый проект,
и дождалось выхода wheezy, в котором такой проблемы вроде нет.&lt;/p&gt;
&lt;h2&gt;Инертное коммьюнити, в которое очень непросто пробиться&lt;/h2&gt;
&lt;p&gt;Как можно заметить из предыдущих минусов, многие важные баги просто не хотят
править, даже при наличии патчей. Если мейнтейнер конкретной области решит,
что ваша проблема не стоит внимания - шансов на исправление крайне мало.&lt;/p&gt;
&lt;h1&gt;Позитив&lt;/h1&gt;
&lt;h2&gt;Пакетная база&lt;/h2&gt;
&lt;p&gt;Безусловно, пакетная база Debian - это огромный плюс.
Несмотря на то, что собрать нужный пакет под тот же RHEL6 не составляет труда, гораздо проще,
когда этим за тебя занимаются другие люди, следящие за обновлениями.&lt;/p&gt;
&lt;h2&gt;Относительная стабильность&lt;/h2&gt;
&lt;p&gt;Несмотря на все недостатки и серьезные баги, система весьма стабильна,
обновления хорошо тестируются, и проблем в эксплуатации не приносят.
Тут, на мой взгляд, единственный конкурент Debian - это RHEL и его производные.
Ключевое ПО все равно приходится ставить с репозиториев разработчиков,
так что общая замшелость не является недостатком.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Tue, 18 Jun 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-06-18:it/Что-я-думаю-о-debian-на-серверах/</guid><category>Debian</category><category>Мнение</category></item><item><title>Мнение о Chef</title><link>http://bulimov.ru/it/%D0%9C%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE-chef/</link><description>&lt;p&gt;Я использовал Chef для управления IT-инфраструктурой около полутора лет, начав с
версии 0.10. Сначала, где-то пол-года, использовал только для управления конфигурациями,
без развертывания ПО с нуля. Затем, уже на другой работе, автоматизировал управления
конфигурациями и развертывание с нуля веб-проекта (30+ серверов, nginx, ruby, riak, redis,
sphinx-search, rabbitmq и т.п.).
Это позволило мне составить собственное мнение o достоинствах и недостатках Chef,
и в этой заметке я свое мнение излагаю.&lt;/p&gt;
&lt;p&gt;По итогу вышеописанной деятельности я был настолько утомлен
недостатками Chef, что начал искать ему замену. Был рассмотрен Puppet и набиравший тогда
популярность Ansible. Для объективного сравнения я реализовал часть из того,
что уже было сделано для проекта с помощью Chef, с использованием этих двух SCM.
По итогу, был выбран Ansible из-за невероятной читабельности получившихся playbook-ов,
хотя Puppet также во многом обошел Chef. Особенно радовала декларативность Ansible и Puppet,
а вот неопределенность порядка выполнения в Puppet огорчила.&lt;/p&gt;
&lt;p&gt;Как-бы то ни было, по итогу работы с Chef у меня сложилось такое мнение:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;В случае комплексной, динамически изменяемой среды, когда требуется на-лету перенастраивать
софт в автоматическом режиме - Chef идеален. Тут его императивность приходится как раз к месту,
поскольку действия выполняются сложные, и зависят от состояния системы в конкретный момент.&lt;/li&gt;
&lt;li&gt;В случае, когда мы имеем ограниченный набор хостов, имеющих каждый свою фиксированную роль, когда
любое переконфигурирование выполнятся специалистом - Chef избыточен, и даже вреден, поскольку
провоцирует писать конфиги-программы, а не конфиги-данные.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Негатив:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ruby - язык хороший, но пакетировать и совмещать разные версии это ад.&lt;/li&gt;
&lt;li&gt;Слабочитаемый конечный конфиг, представляющий собой код на ruby. Это главный минус.&lt;/li&gt;
&lt;li&gt;Императивный стиль большинства рецептов.&lt;/li&gt;
&lt;li&gt;Жуткая ruby-мешанина в большинстве публичных рецептов, кроме как LWRP использовать оттуда нечего.&lt;/li&gt;
&lt;li&gt;Привязанность многих cookbooks к Ubuntu.&lt;/li&gt;
&lt;li&gt;Сложная, хоть и продуманная архитектура.&lt;/li&gt;
&lt;li&gt;Море зависимостей у клиента и сервера, проблемы с версиями Ruby. К примеру, для squeeze и ruby1.9.3 пришлось пересобрать более 10 пакетов.&lt;/li&gt;
&lt;li&gt;Для debian пришлось патчить chef для обхода проблемы с неработающим update-rc.d stop, хотя в puppet уже был рабочий workaround.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Позитив:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Окружения (environments).&lt;/li&gt;
&lt;li&gt;Версии cookbook для каждого окружения, заморозка пакетов.&lt;/li&gt;
&lt;li&gt;Готовые cookbooks, полезно для вникания.&lt;/li&gt;
&lt;li&gt;Knife - отличный инстумент для любителей консоли вроде меня.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bulimov</dc:creator><pubDate>Mon, 17 Jun 2013 00:00:00 +0400</pubDate><guid>tag:bulimov.ru,2013-06-17:it/Мнение-о-chef/</guid><category>Chef</category><category>Мнение</category></item></channel></rss>